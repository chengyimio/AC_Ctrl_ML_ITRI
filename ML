{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOcJw629IPSbAIrN9pMPId+",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/chengyimio/AC_Ctrl_ML_ITRI/blob/main/ML\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install tensorflow pandas numpy matplotlib seaborn scikit-learn"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XturNHHDLV63",
        "outputId": "191f0a4c-f426-4970-9e57-247298410cbc"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: tensorflow in /usr/local/lib/python3.11/dist-packages (2.19.0)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (2.0.2)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.11/dist-packages (0.13.2)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
            "Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.4.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.6.3)\n",
            "Requirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (25.2.10)\n",
            "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.6.0)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.2.0)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (18.1.1)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.4.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from tensorflow) (25.0)\n",
            "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (5.29.5)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.32.3)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from tensorflow) (75.2.0)\n",
            "Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.17.0)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.1.0)\n",
            "Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (4.14.1)\n",
            "Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.17.2)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.74.0)\n",
            "Requirement already satisfied: tensorboard~=2.19.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.19.0)\n",
            "Requirement already satisfied: keras>=3.5.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.10.0)\n",
            "Requirement already satisfied: h5py>=3.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.14.0)\n",
            "Requirement already satisfied: ml-dtypes<1.0.0,>=0.5.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.5.3)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.37.1)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.3)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.59.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.3.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.16.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.5.1)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.6.0)\n",
            "Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from astunparse>=1.6.0->tensorflow) (0.45.1)\n",
            "Requirement already satisfied: rich in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (13.9.4)\n",
            "Requirement already satisfied: namex in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (0.1.0)\n",
            "Requirement already satisfied: optree in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (0.17.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (2.5.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (2025.8.3)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.11/dist-packages (from tensorboard~=2.19.0->tensorflow) (3.8.2)\n",
            "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from tensorboard~=2.19.0->tensorflow) (0.7.2)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from tensorboard~=2.19.0->tensorflow) (3.1.3)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from werkzeug>=1.0.1->tensorboard~=2.19.0->tensorflow) (3.0.2)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.5.0->tensorflow) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.5.0->tensorflow) (2.19.2)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.5.0->tensorflow) (0.1.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "    !wget -O /usr/share/fonts/truetype/simhei.ttf \"https://www.wfonts.com/download/data/2014/06/01/simhei/chinese.simhei.ttf\""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hNAQJxNA0CDW",
        "outputId": "3cf4ed83-4412-412d-fe14-ad030294d54e"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2025-08-13 00:21:33--  https://www.wfonts.com/download/data/2014/06/01/simhei/chinese.simhei.ttf\n",
            "Resolving www.wfonts.com (www.wfonts.com)... 104.21.1.127, 172.67.129.58, 2606:4700:3037::6815:17f, ...\n",
            "Connecting to www.wfonts.com (www.wfonts.com)|104.21.1.127|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 10050870 (9.6M) [application/octetstream]\n",
            "Saving to: ‘/usr/share/fonts/truetype/simhei.ttf’\n",
            "\n",
            "/usr/share/fonts/tr 100%[===================>]   9.58M  9.82MB/s    in 1.0s    \n",
            "\n",
            "2025-08-13 00:21:35 (9.82 MB/s) - ‘/usr/share/fonts/truetype/simhei.ttf’ saved [10050870/10050870]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yDME-jWZBH6Y",
        "outputId": "c632497e-36a3-4cc4-d725-3bfe7eeab7e0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "TensorFlow版本: 2.19.0\n",
            "GPU可用: []\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from datetime import datetime, timedelta\n",
        "import matplotlib.pyplot as plt\n",
        "plt.rcParams['font.sans-serif'] = ['SimHei']  # 或者 'Microsoft YaHei'\n",
        "plt.rcParams['axes.unicode_minus'] = False\n",
        "\n",
        "# 機器學習相關\n",
        "from sklearn.preprocessing import MinMaxScaler, StandardScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
        "\n",
        "# TensorFlow/Keras\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import LSTM, Dense, Dropout, BatchNormalization\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n",
        "\n",
        "# 設定隨機種子\n",
        "np.random.seed(42)\n",
        "tf.random.set_seed(42)\n",
        "\n",
        "print(\"TensorFlow版本:\", tf.__version__)\n",
        "print(\"GPU可用:\", tf.config.list_physical_devices('GPU'))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "print(\"請上傳您的CSV檔案:\")\n",
        "uploaded = files.upload()\n",
        "\n",
        "# 取得檔案名稱\n",
        "filename = list(uploaded.keys())[0]\n",
        "print(f\"已上傳檔案: {filename}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 114
        },
        "id": "66kOr66bfq9w",
        "outputId": "5d62a0d9-6672-48ba-9312-98107d533a44"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "請上傳您的CSV檔案:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-b0cdb677-7fe1-4ec8-8577-151ea461c17e\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-b0cdb677-7fe1-4ec8-8577-151ea461c17e\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving meeting_days_data.csv to meeting_days_data.csv\n",
            "已上傳檔案: meeting_days_data.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def load_and_explore_data(filename):\n",
        "    \"\"\"載入並探索數據\"\"\"\n",
        "    print(\"正在載入數據...\")\n",
        "    df = pd.read_csv(filename)\n",
        "\n",
        "    print(f\"數據形狀: {df.shape}\")\n",
        "    print(f\"時間範圍: {df.iloc[0, 0]} 到 {df.iloc[-1, 0]}\")\n",
        "    print(\"\\n欄位資訊:\")\n",
        "    print(df.info())\n",
        "    print(\"\\n前5筆數據:\")\n",
        "    print(df.head())\n",
        "    print(\"\\n統計摘要:\")\n",
        "    print(df.describe())\n",
        "\n",
        "    return df\n",
        "\n",
        "df = load_and_explore_data(filename)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vufOiGvxfvi1",
        "outputId": "12ee7f96-9628-4684-e3eb-2272ef5b4a3a"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "正在載入數據...\n",
            "數據形狀: (4608, 34)\n",
            "時間範圍: 2025-01-15 00:00:00 到 2025-06-26 23:55:00\n",
            "\n",
            "欄位資訊:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 4608 entries, 0 to 4607\n",
            "Data columns (total 34 columns):\n",
            " #   Column                    Non-Null Count  Dtype  \n",
            "---  ------                    --------------  -----  \n",
            " 0   DateTime                  4608 non-null   object \n",
            " 1   Indoor_Temp               4603 non-null   float64\n",
            " 2   Indoor_Humidity           4603 non-null   float64\n",
            " 3   CO2                       4603 non-null   float64\n",
            " 4   Outdoor_Temp              4603 non-null   float64\n",
            " 5   Outdoor_Humidity          4603 non-null   float64\n",
            " 6   Power_Consumption         4501 non-null   float64\n",
            " 7   Meeting_Status            4608 non-null   object \n",
            " 8   Meeting_Location          892 non-null    object \n",
            " 9   Pre_Cooling               4608 non-null   bool   \n",
            " 10  Hour                      4608 non-null   int64  \n",
            " 11  DayOfWeek                 4608 non-null   int64  \n",
            " 12  Month                     4608 non-null   int64  \n",
            " 13  IsWeekend                 4608 non-null   bool   \n",
            " 14  IsWorkingHour             4608 non-null   bool   \n",
            " 15  CO2_diff_5min             4600 non-null   float64\n",
            " 16  CO2_diff_15min            4598 non-null   float64\n",
            " 17  CO2_diff_30min            4598 non-null   float64\n",
            " 18  CO2_change_rate           4600 non-null   float64\n",
            " 19  CO2_MA_15min              4597 non-null   float64\n",
            " 20  CO2_MA_30min              4588 non-null   float64\n",
            " 21  CO2_STD_30min             4588 non-null   float64\n",
            " 22  Temp_Diff_Indoor_Outdoor  4603 non-null   float64\n",
            " 23  Indoor_Temp_Change        4600 non-null   float64\n",
            " 24  Outdoor_Temp_Change       4600 non-null   float64\n",
            " 25  AC_Running                4608 non-null   bool   \n",
            " 26  Energy_kWh                4501 non-null   float64\n",
            " 27  Date                      4608 non-null   object \n",
            " 28  Daily_Cumulative_Energy   4501 non-null   float64\n",
            " 29  Is_Meeting                4608 non-null   bool   \n",
            " 30  Meeting_Start             4608 non-null   bool   \n",
            " 31  Meeting_End               4608 non-null   bool   \n",
            " 32  Cooling_Efficiency        4493 non-null   float64\n",
            " 33  Ventilation_Efficiency    4493 non-null   float64\n",
            "dtypes: bool(7), float64(20), int64(3), object(4)\n",
            "memory usage: 1003.6+ KB\n",
            "None\n",
            "\n",
            "前5筆數據:\n",
            "              DateTime  Indoor_Temp  Indoor_Humidity    CO2  Outdoor_Temp  \\\n",
            "0  2025-01-15 00:00:00     18.23529            53.84  422.4      17.87500   \n",
            "1  2025-01-15 00:05:00     18.23529            53.76  422.4      17.86250   \n",
            "2  2025-01-15 00:10:00     18.23529            53.76  424.0      17.87813   \n",
            "3  2025-01-15 00:15:00     18.23529            53.36  424.0      17.88437   \n",
            "4  2025-01-15 00:20:00     18.23529            53.76  422.4      17.75000   \n",
            "\n",
            "   Outdoor_Humidity  Power_Consumption Meeting_Status Meeting_Location  \\\n",
            "0          88.86875                0.1     No_Meeting              NaN   \n",
            "1          88.86875                0.1     No_Meeting              NaN   \n",
            "2          89.11875                0.1     No_Meeting              NaN   \n",
            "3          89.48125                0.1     No_Meeting              NaN   \n",
            "4          88.86250                0.1     No_Meeting              NaN   \n",
            "\n",
            "   Pre_Cooling  ...  Outdoor_Temp_Change  AC_Running  Energy_kWh        Date  \\\n",
            "0        False  ...             -0.00313       False    0.008333  2025-01-15   \n",
            "1        False  ...             -0.01250       False    0.008333  2025-01-15   \n",
            "2        False  ...              0.01563       False    0.008333  2025-01-15   \n",
            "3        False  ...              0.00624       False    0.008333  2025-01-15   \n",
            "4        False  ...             -0.13437       False    0.008333  2025-01-15   \n",
            "\n",
            "   Daily_Cumulative_Energy  Is_Meeting  Meeting_Start  Meeting_End  \\\n",
            "0                 0.008333       False          False        False   \n",
            "1                 0.016667       False          False        False   \n",
            "2                 0.025000       False          False        False   \n",
            "3                 0.033333       False          False        False   \n",
            "4                 0.041667       False          False        False   \n",
            "\n",
            "   Cooling_Efficiency  Ventilation_Efficiency  \n",
            "0                 0.0               14.545455  \n",
            "1                 0.0                0.000000  \n",
            "2                 0.0                0.000000  \n",
            "3                 0.0                0.000000  \n",
            "4                 0.0               14.545455  \n",
            "\n",
            "[5 rows x 34 columns]\n",
            "\n",
            "統計摘要:\n",
            "       Indoor_Temp  Indoor_Humidity          CO2  Outdoor_Temp  \\\n",
            "count  4603.000000      4603.000000  4603.000000   4603.000000   \n",
            "mean     23.924287        58.417380   609.786661     24.889688   \n",
            "std       3.393060         5.665871   236.331856      5.616531   \n",
            "min       0.000000        46.480000     0.000000     13.703130   \n",
            "25%      20.772530        54.040000   449.600000     18.742190   \n",
            "50%      25.593220        58.240000   520.000000     26.940630   \n",
            "75%      26.355930        62.720000   709.600000     28.743750   \n",
            "max      27.372880        69.520000  1960.000000     33.812500   \n",
            "\n",
            "       Outdoor_Humidity  Power_Consumption         Hour    DayOfWeek  \\\n",
            "count       4603.000000        4501.000000  4608.000000  4608.000000   \n",
            "mean          80.506721           1.584672    11.500000     2.437500   \n",
            "std            9.115825           2.485818     6.922938     1.801887   \n",
            "min           55.812500           0.090000     0.000000     0.000000   \n",
            "25%           74.462490           0.190000     5.750000     1.000000   \n",
            "50%           82.718750           0.190000    11.500000     2.500000   \n",
            "75%           87.612500           1.650000    17.250000     4.000000   \n",
            "max           97.200000           9.450000    23.000000     6.000000   \n",
            "\n",
            "             Month  CO2_diff_5min  ...  CO2_MA_15min  CO2_MA_30min  \\\n",
            "count  4608.000000    4600.000000  ...   4597.000000   4588.000000   \n",
            "mean      4.500000       0.410435  ...    609.918121    609.906539   \n",
            "std       1.732239      33.311898  ...    235.572944    235.093102   \n",
            "min       1.000000    -643.200000  ...    280.533333    349.333333   \n",
            "25%       3.750000      -1.600000  ...    449.600000    449.333333   \n",
            "50%       5.000000       0.000000  ...    520.533333    520.400000   \n",
            "75%       6.000000       1.600000  ...    709.333333    708.133333   \n",
            "max       6.000000     643.200000  ...   1955.733333   1936.800000   \n",
            "\n",
            "       CO2_STD_30min  Temp_Diff_Indoor_Outdoor  Indoor_Temp_Change  \\\n",
            "count    4588.000000               4603.000000         4600.000000   \n",
            "mean       11.861512                 -0.965401           -0.001663   \n",
            "std        27.643223                  3.486399            1.666147   \n",
            "min         0.000000                -28.690620          -27.372880   \n",
            "25%         1.204436                 -3.012820            0.000000   \n",
            "50%         2.629068                 -0.840240            0.000000   \n",
            "75%         9.488210                  1.886865            0.000000   \n",
            "max       263.635466                  5.048790           27.372880   \n",
            "\n",
            "       Outdoor_Temp_Change   Energy_kWh  Daily_Cumulative_Energy  \\\n",
            "count          4600.000000  4501.000000              4501.000000   \n",
            "mean             -0.002448     0.132056                17.257396   \n",
            "std               0.080756     0.207152                20.440917   \n",
            "min              -1.553130     0.007500                 0.008333   \n",
            "25%              -0.037500     0.015833                 1.008333   \n",
            "50%              -0.006240     0.015833                 7.621667   \n",
            "75%               0.037500     0.137500                29.384167   \n",
            "max               0.318740     0.787500                84.305000   \n",
            "\n",
            "       Cooling_Efficiency  Ventilation_Efficiency  \n",
            "count         4493.000000             4493.000000  \n",
            "mean             0.134434                8.159597  \n",
            "std              3.320470               60.884912  \n",
            "min              0.000000                0.000000  \n",
            "25%              0.000000                0.000000  \n",
            "50%              0.000000                0.000000  \n",
            "75%              0.000000                8.000000  \n",
            "max            136.864400             2552.000000  \n",
            "\n",
            "[8 rows x 23 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def preprocess_data(df):\n",
        "    \"\"\"改進的數據預處理函數 - 包含智慧填補策略\"\"\"\n",
        "    print(\"開始數據預處理...\")\n",
        "\n",
        "    # 處理時間欄位 (假設第一欄是時間)\n",
        "    time_col = df.columns[0]\n",
        "    df[time_col] = pd.to_datetime(df[time_col])\n",
        "\n",
        "    # 排序數據\n",
        "    df = df.sort_values(time_col).reset_index(drop=True)\n",
        "\n",
        "    # 檢查缺失值\n",
        "    print(\"缺失值檢查:\")\n",
        "    missing_summary = df.isnull().sum()\n",
        "    print(missing_summary[missing_summary > 0])\n",
        "\n",
        "    # === 智慧填補策略 ===\n",
        "    print(\"\\n執行智慧數據填補...\")\n",
        "\n",
        "    # 1. 重新計算時間衍生特徵（如果缺失的話）\n",
        "    if 'Hour' not in df.columns or df['Hour'].isnull().sum() > 0:\n",
        "        df['Hour'] = df[time_col].dt.hour\n",
        "    if 'DayOfWeek' not in df.columns or df['DayOfWeek'].isnull().sum() > 0:\n",
        "        df['DayOfWeek'] = df[time_col].dt.dayofweek\n",
        "    if 'Month' not in df.columns or df['Month'].isnull().sum() > 0:\n",
        "        df['Month'] = df[time_col].dt.month\n",
        "    if 'IsWeekend' not in df.columns or df['IsWeekend'].isnull().sum() > 0:\n",
        "        df['IsWeekend'] = (df[time_col].dt.weekday >= 5).astype(int)\n",
        "    if 'IsWorkingHour' not in df.columns or df['IsWorkingHour'].isnull().sum() > 0:\n",
        "        df['IsWorkingHour'] = ((df[time_col].dt.hour >= 8) &\n",
        "                               (df[time_col].dt.hour <= 18) &\n",
        "                               (df[time_col].dt.weekday < 5)).astype(int)\n",
        "\n",
        "    # 2. 感測器數據 - 線性插值\n",
        "    sensor_columns = ['Indoor_Temp', 'Indoor_Humidity', 'CO2',\n",
        "                     'Outdoor_Temp', 'Outdoor_Humidity', 'Power_Consumption']\n",
        "\n",
        "    for col in sensor_columns:\n",
        "        if col in df.columns and df[col].isnull().sum() > 0:\n",
        "            missing_count = df[col].isnull().sum()\n",
        "            # 線性插值\n",
        "            df[col] = df[col].interpolate(method='linear', limit_direction='both')\n",
        "            # 如果仍有缺失（開頭或結尾），用前後值填補\n",
        "            df[col] = df[col].fillna(method='bfill').fillna(method='ffill')\n",
        "            print(f\"  {col}: 線性插值填補 {missing_count} 個缺失值\")\n",
        "\n",
        "    # 3. 類別/狀態數據 - 邏輯填補\n",
        "    categorical_columns = ['Meeting_Status', 'AC_Running', 'Is_Meeting']\n",
        "\n",
        "    for col in categorical_columns:\n",
        "        if col in df.columns and df[col].isnull().sum() > 0:\n",
        "            missing_count = df[col].isnull().sum()\n",
        "            if col in ['Meeting_Status', 'Is_Meeting']:\n",
        "                # 會議狀態缺失填入0（無會議）\n",
        "                df[col] = df[col].fillna(0)\n",
        "            elif col == 'AC_Running':\n",
        "                # 空調狀態用前向填補\n",
        "                df[col] = df[col].fillna(method='ffill').fillna(0)\n",
        "            print(f\"  {col}: 邏輯填補 {missing_count} 個缺失值\")\n",
        "\n",
        "    # 4. 重新計算差值和變化率（這些不應該直接填補）\n",
        "    if 'CO2' in df.columns:\n",
        "        # CO2差值\n",
        "        if 'CO2_diff_5min' in df.columns:\n",
        "            df['CO2_diff_5min'] = df['CO2'].diff(1)\n",
        "            print(\"  CO2_diff_5min: 重新計算\")\n",
        "\n",
        "        if 'CO2_diff_15min' in df.columns:\n",
        "            df['CO2_diff_15min'] = df['CO2'].diff(3)  # 假設5分鐘間隔，15分鐘=3個點\n",
        "            print(\"  CO2_diff_15min: 重新計算\")\n",
        "\n",
        "        if 'CO2_diff_30min' in df.columns:\n",
        "            df['CO2_diff_30min'] = df['CO2'].diff(6)  # 30分鐘=6個點\n",
        "            print(\"  CO2_diff_30min: 重新計算\")\n",
        "\n",
        "        # CO2變化率\n",
        "        if 'CO2_change_rate' in df.columns:\n",
        "            df['CO2_change_rate'] = df['CO2'].pct_change()\n",
        "            print(\"  CO2_change_rate: 重新計算\")\n",
        "\n",
        "        # CO2移動平均\n",
        "        if 'CO2_MA_15min' in df.columns:\n",
        "            df['CO2_MA_15min'] = df['CO2'].rolling(window=3, min_periods=1).mean()\n",
        "            print(\"  CO2_MA_15min: 重新計算\")\n",
        "\n",
        "        if 'CO2_MA_30min' in df.columns:\n",
        "            df['CO2_MA_30min'] = df['CO2'].rolling(window=6, min_periods=1).mean()\n",
        "            print(\"  CO2_MA_30min: 重新計算\")\n",
        "\n",
        "        # CO2標準差\n",
        "        if 'CO2_STD_30min' in df.columns:\n",
        "            df['CO2_STD_30min'] = df['CO2'].rolling(window=6, min_periods=1).std()\n",
        "            print(\"  CO2_STD_30min: 重新計算\")\n",
        "\n",
        "    # 5. 溫度相關計算\n",
        "    if 'Indoor_Temp' in df.columns and 'Outdoor_Temp' in df.columns:\n",
        "        if 'Temp_Diff_Indoor_Outdoor' in df.columns:\n",
        "            df['Temp_Diff_Indoor_Outdoor'] = df['Indoor_Temp'] - df['Outdoor_Temp']\n",
        "            print(\"  Temp_Diff_Indoor_Outdoor: 重新計算\")\n",
        "\n",
        "    if 'Indoor_Temp' in df.columns and 'Indoor_Temp_Change' in df.columns:\n",
        "        df['Indoor_Temp_Change'] = df['Indoor_Temp'].diff(1)\n",
        "        print(\"  Indoor_Temp_Change: 重新計算\")\n",
        "\n",
        "    if 'Outdoor_Temp' in df.columns and 'Outdoor_Temp_Change' in df.columns:\n",
        "        df['Outdoor_Temp_Change'] = df['Outdoor_Temp'].diff(1)\n",
        "        print(\"  Outdoor_Temp_Change: 重新計算\")\n",
        "\n",
        "    # 6. 能耗相關\n",
        "    energy_columns = ['Energy_kWh', 'Daily_Cumulative_Energy']\n",
        "    for col in energy_columns:\n",
        "        if col in df.columns and df[col].isnull().sum() > 0:\n",
        "            missing_count = df[col].isnull().sum()\n",
        "            if col == 'Energy_kWh':\n",
        "                # 能耗數據線性插值\n",
        "                df[col] = df[col].interpolate(method='linear')\n",
        "                df[col] = df[col].fillna(method='ffill')\n",
        "            elif col == 'Daily_Cumulative_Energy' and 'Power_Consumption' in df.columns:\n",
        "                # 重新計算每日累積能耗\n",
        "                df['Date'] = df[time_col].dt.date\n",
        "                df[col] = df.groupby('Date')['Power_Consumption'].cumsum()\n",
        "            print(f\"  {col}: 能耗數據填補 {missing_count} 個缺失值\")\n",
        "\n",
        "    # 7. 會議相關\n",
        "    meeting_columns = ['Meeting_Location', 'Meeting_Start', 'Meeting_End']\n",
        "    for col in meeting_columns:\n",
        "        if col in df.columns and df[col].isnull().sum() > 0:\n",
        "            missing_count = df[col].isnull().sum()\n",
        "            if col == 'Meeting_Location':\n",
        "                # 有會議但地點缺失，填入預設值\n",
        "                if 'Meeting_Status' in df.columns:\n",
        "                    mask = (df['Meeting_Status'] == 1) & df[col].isnull()\n",
        "                    df.loc[mask, col] = 'Conference_Room'\n",
        "                # 沒會議的地點設為空\n",
        "                mask = (df['Meeting_Status'] == 0)\n",
        "                df.loc[mask, col] = None\n",
        "            print(f\"  {col}: 會議相關填補 {missing_count} 個缺失值\")\n",
        "\n",
        "    # 8. 效率指標 - 基於其他變數重新計算\n",
        "    if 'Cooling_Efficiency' in df.columns:\n",
        "        if 'Temp_Diff_Indoor_Outdoor' in df.columns and 'Power_Consumption' in df.columns:\n",
        "            temp_diff = df['Temp_Diff_Indoor_Outdoor'].abs()\n",
        "            power = df['Power_Consumption']\n",
        "            df['Cooling_Efficiency'] = np.where(power > 0, temp_diff / power, 0)\n",
        "            print(\"  Cooling_Efficiency: 重新計算\")\n",
        "\n",
        "    if 'Ventilation_Efficiency' in df.columns:\n",
        "        if 'CO2_change_rate' in df.columns and 'Power_Consumption' in df.columns:\n",
        "            co2_reduction = -df['CO2_change_rate']  # 負值表示CO2降低\n",
        "            power = df['Power_Consumption']\n",
        "            df['Ventilation_Efficiency'] = np.where((power > 0) & (co2_reduction > 0),\n",
        "                                                   co2_reduction / power, 0)\n",
        "            print(\"  Ventilation_Efficiency: 重新計算\")\n",
        "\n",
        "    # 9. 對剩餘的數值型缺失值用中位數填補\n",
        "    numeric_columns = df.select_dtypes(include=[np.number]).columns\n",
        "    for col in numeric_columns:\n",
        "        if df[col].isnull().sum() > 0:\n",
        "            missing_count = df[col].isnull().sum()\n",
        "            median_value = df[col].median()\n",
        "            df[col] = df[col].fillna(median_value)\n",
        "            print(f\"  {col}: 中位數填補 {missing_count} 個缺失值\")\n",
        "\n",
        "    # 10. 對剩餘的非數值型缺失值用前向填補（排除特殊欄位）\n",
        "    non_numeric_columns = df.select_dtypes(exclude=[np.number]).columns\n",
        "\n",
        "    # 這些欄位在特定情況下缺失是正常的，不應該填補\n",
        "    exclude_from_filling = [\n",
        "        time_col,  # 時間欄位\n",
        "        'Meeting_Location',  # 沒會議時地點應該為空\n",
        "        'Meeting_Start',     # 沒會議時開始時間應該為空\n",
        "        'Meeting_End',       # 沒會議時結束時間應該為空\n",
        "        'Date'               # 日期欄位\n",
        "    ]\n",
        "\n",
        "    for col in non_numeric_columns:\n",
        "        if col not in exclude_from_filling and df[col].isnull().sum() > 0:\n",
        "            missing_count = df[col].isnull().sum()\n",
        "            df[col] = df[col].fillna(method='ffill').fillna(method='bfill')\n",
        "            print(f\"  {col}: 前向填補 {missing_count} 個缺失值\")\n",
        "\n",
        "    # 創建基本時間特徵（如果還沒有的話）\n",
        "    if 'hour' not in df.columns:\n",
        "        df['hour'] = df[time_col].dt.hour\n",
        "    if 'weekday' not in df.columns:\n",
        "        df['weekday'] = df[time_col].dt.weekday\n",
        "    if 'month' not in df.columns:\n",
        "        df['month'] = df[time_col].dt.month\n",
        "\n",
        "    # 最終缺失值檢查\n",
        "    final_missing = df.isnull().sum()\n",
        "    print(f\"\\n填補後缺失值檢查:\")\n",
        "    if final_missing.sum() == 0:\n",
        "        print(\"✅ 所有缺失值已成功填補！\")\n",
        "    else:\n",
        "        print(\"⚠️ 仍有缺失值的欄位:\")\n",
        "        print(final_missing[final_missing > 0])\n",
        "\n",
        "    print(\"預處理完成！\")\n",
        "    return df\n",
        "\n",
        "# 使用方法保持不變\n",
        "df = preprocess_data(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "53mYWUgUfyRO",
        "outputId": "ebb4dbcf-d006-479f-90eb-d2f848cbbb3d"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "開始數據預處理...\n",
            "缺失值檢查:\n",
            "Indoor_Temp                    5\n",
            "Indoor_Humidity                5\n",
            "CO2                            5\n",
            "Outdoor_Temp                   5\n",
            "Outdoor_Humidity               5\n",
            "Power_Consumption            107\n",
            "Meeting_Location            3716\n",
            "CO2_diff_5min                  8\n",
            "CO2_diff_15min                10\n",
            "CO2_diff_30min                10\n",
            "CO2_change_rate                8\n",
            "CO2_MA_15min                  11\n",
            "CO2_MA_30min                  20\n",
            "CO2_STD_30min                 20\n",
            "Temp_Diff_Indoor_Outdoor       5\n",
            "Indoor_Temp_Change             8\n",
            "Outdoor_Temp_Change            8\n",
            "Energy_kWh                   107\n",
            "Daily_Cumulative_Energy      107\n",
            "Cooling_Efficiency           115\n",
            "Ventilation_Efficiency       115\n",
            "dtype: int64\n",
            "\n",
            "執行智慧數據填補...\n",
            "  Indoor_Temp: 線性插值填補 5 個缺失值\n",
            "  Indoor_Humidity: 線性插值填補 5 個缺失值\n",
            "  CO2: 線性插值填補 5 個缺失值\n",
            "  Outdoor_Temp: 線性插值填補 5 個缺失值\n",
            "  Outdoor_Humidity: 線性插值填補 5 個缺失值\n",
            "  Power_Consumption: 線性插值填補 107 個缺失值\n",
            "  CO2_diff_5min: 重新計算\n",
            "  CO2_diff_15min: 重新計算\n",
            "  CO2_diff_30min: 重新計算\n",
            "  CO2_change_rate: 重新計算\n",
            "  CO2_MA_15min: 重新計算\n",
            "  CO2_MA_30min: 重新計算\n",
            "  CO2_STD_30min: 重新計算\n",
            "  Temp_Diff_Indoor_Outdoor: 重新計算\n",
            "  Indoor_Temp_Change: 重新計算\n",
            "  Outdoor_Temp_Change: 重新計算\n",
            "  Energy_kWh: 能耗數據填補 107 個缺失值\n",
            "  Daily_Cumulative_Energy: 能耗數據填補 107 個缺失值\n",
            "  Meeting_Location: 會議相關填補 3716 個缺失值\n",
            "  Cooling_Efficiency: 重新計算\n",
            "  Ventilation_Efficiency: 重新計算\n",
            "  CO2_diff_5min: 中位數填補 1 個缺失值\n",
            "  CO2_diff_15min: 中位數填補 3 個缺失值\n",
            "  CO2_diff_30min: 中位數填補 6 個缺失值\n",
            "  CO2_change_rate: 中位數填補 1 個缺失值\n",
            "  CO2_STD_30min: 中位數填補 1 個缺失值\n",
            "  Indoor_Temp_Change: 中位數填補 1 個缺失值\n",
            "  Outdoor_Temp_Change: 中位數填補 1 個缺失值\n",
            "\n",
            "填補後缺失值檢查:\n",
            "⚠️ 仍有缺失值的欄位:\n",
            "Meeting_Location    3716\n",
            "dtype: int64\n",
            "預處理完成！\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-3429783845.py:44: FutureWarning: Series.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
            "  df[col] = df[col].fillna(method='bfill').fillna(method='ffill')\n",
            "/tmp/ipython-input-3429783845.py:117: FutureWarning: Series.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
            "  df[col] = df[col].fillna(method='ffill')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def create_features(df):\n",
        "    \"\"\"創建特徵 - 根據您的實際欄位名稱\"\"\"\n",
        "    print(\"創建特徵...\")\n",
        "\n",
        "    # 根據您提供的欄位名稱來匹配特徵\n",
        "    # 您的實際欄位名稱：\n",
        "    actual_columns = [\n",
        "        'DateTime', 'Indoor_Temp', 'Indoor_Humidity', 'CO2',\n",
        "        'Outdoor_Temp', 'Outdoor_Humidity', 'Power_Consumption',\n",
        "        'Meeting_Status', 'Meeting_Location', 'Pre_Cooling',\n",
        "        'Hour', 'DayOfWeek', 'Month', 'IsWeekend', 'IsWorkingHour',\n",
        "        'CO2_diff_5min', 'CO2_diff_15min', 'CO2_diff_30min',\n",
        "        'CO2_change_rate', 'CO2_MA_15min', 'CO2_MA_30min',\n",
        "        'CO2_STD_30min', 'Temp_Diff_Indoor_Outdoor',\n",
        "        'Indoor_Temp_Change', 'Outdoor_Temp_Change',\n",
        "        'AC_Running', 'Energy_kWh', 'Date', 'Daily_Cumulative_Energy',\n",
        "        'Is_Meeting', 'Meeting_Start', 'Meeting_End',\n",
        "        'Cooling_Efficiency', 'Ventilation_Efficiency'\n",
        "    ]\n",
        "\n",
        "    # 分類特徵\n",
        "    feature_categories = {\n",
        "        # 基礎環境感測器\n",
        "        'basic_sensors': [\n",
        "            'Indoor_Temp', 'Indoor_Humidity', 'CO2',\n",
        "            'Outdoor_Temp', 'Outdoor_Humidity'\n",
        "        ],\n",
        "\n",
        "        # 時間特徵\n",
        "        'time_features': [\n",
        "            'Hour', 'DayOfWeek', 'Month', 'IsWeekend', 'IsWorkingHour'\n",
        "        ],\n",
        "\n",
        "        # 會議相關\n",
        "        'meeting_features': [\n",
        "            'Meeting_Status', 'Is_Meeting', 'Pre_Cooling'\n",
        "        ],\n",
        "\n",
        "        # 設備狀態\n",
        "        'equipment_features': [\n",
        "            'AC_Running', 'Power_Consumption'\n",
        "        ],\n",
        "\n",
        "        # CO2相關衍生特徵\n",
        "        'co2_derived': [\n",
        "            'CO2_diff_5min', 'CO2_diff_15min', 'CO2_diff_30min',\n",
        "            'CO2_change_rate', 'CO2_MA_15min', 'CO2_MA_30min', 'CO2_STD_30min'\n",
        "        ],\n",
        "\n",
        "        # 溫度相關衍生特徵\n",
        "        'temp_derived': [\n",
        "            'Temp_Diff_Indoor_Outdoor', 'Indoor_Temp_Change', 'Outdoor_Temp_Change'\n",
        "        ],\n",
        "\n",
        "        # 能耗相關\n",
        "        'energy_features': [\n",
        "            'Energy_kWh', 'Daily_Cumulative_Energy'\n",
        "        ],\n",
        "\n",
        "        # 效率指標\n",
        "        'efficiency_features': [\n",
        "            'Cooling_Efficiency', 'Ventilation_Efficiency'\n",
        "        ]\n",
        "    }\n",
        "\n",
        "    # 檢查實際存在的特徵\n",
        "    available_features = []\n",
        "    feature_summary = {}\n",
        "\n",
        "    for category, features in feature_categories.items():\n",
        "        available_in_category = [col for col in features if col in df.columns]\n",
        "        if available_in_category:\n",
        "            available_features.extend(available_in_category)\n",
        "            feature_summary[category] = available_in_category\n",
        "\n",
        "    # 顯示特徵摘要\n",
        "    print(\"\\n=== 可用特徵摘要 ===\")\n",
        "    for category, features in feature_summary.items():\n",
        "        print(f\"{category}: {features}\")\n",
        "\n",
        "    print(f\"\\n總共可用特徵數量: {len(available_features)}\")\n",
        "\n",
        "    # 如果特徵太少，提供建議\n",
        "    if len(available_features) < 5:\n",
        "        print(\"\\n⚠️ 警告：可用特徵較少，可能影響模型效果\")\n",
        "        print(\"建議檢查以下內容：\")\n",
        "        print(\"1. 欄位名稱是否正確\")\n",
        "        print(\"2. 數據預處理是否完成\")\n",
        "        print(\"3. 是否需要創建更多特徵\")\n",
        "\n",
        "        print(f\"\\n您的實際欄位: {list(df.columns)}\")\n",
        "\n",
        "        # 如果找不到足夠特徵，提供備選方案\n",
        "        print(\"\\n使用所有數值型欄位作為特徵...\")\n",
        "        numeric_columns = df.select_dtypes(include=[np.number]).columns.tolist()\n",
        "        # 移除目標變數和時間相關\n",
        "        exclude_cols = ['CO2']  # CO2是目標變數\n",
        "        available_features = [col for col in numeric_columns if col not in exclude_cols]\n",
        "\n",
        "    # 特徵重要性預估\n",
        "    feature_importance_estimate = {\n",
        "        # 核心特徵（對CO2預測最重要）\n",
        "        'high_importance': ['Meeting_Status', 'Is_Meeting', 'CO2_MA_15min', 'CO2_diff_5min'],\n",
        "        'medium_importance': ['Indoor_Temp', 'Indoor_Humidity', 'Hour', 'IsWorkingHour'],\n",
        "        'low_importance': ['Month', 'DayOfWeek', 'Outdoor_Temp']\n",
        "    }\n",
        "\n",
        "    print(\"\\n=== 特徵重要性預估 ===\")\n",
        "    for importance, features in feature_importance_estimate.items():\n",
        "        available_important = [f for f in features if f in available_features]\n",
        "        if available_important:\n",
        "            print(f\"{importance}: {available_important}\")\n",
        "\n",
        "    # 檢查是否有CO2目標變數\n",
        "    co2_columns = [col for col in df.columns if 'CO2' in col and 'diff' not in col and 'MA' not in col and 'change' not in col and 'STD' not in col]\n",
        "    if co2_columns:\n",
        "        print(f\"\\n✅ 找到CO2目標變數: {co2_columns[0]}\")\n",
        "    else:\n",
        "        print(\"\\n❌ 警告：未找到CO2目標變數！\")\n",
        "\n",
        "    return available_features\n",
        "\n",
        "def get_target_column(df):\n",
        "    \"\"\"識別CO2目標變數\"\"\"\n",
        "    # 尋找CO2相關欄位，但排除衍生特徵\n",
        "    co2_candidates = []\n",
        "    for col in df.columns:\n",
        "        col_lower = col.lower()\n",
        "        if 'co2' in col_lower:\n",
        "            # 排除衍生特徵\n",
        "            if not any(keyword in col_lower for keyword in ['diff', 'ma', 'change', 'std', 'rate']):\n",
        "                co2_candidates.append(col)\n",
        "\n",
        "    if len(co2_candidates) == 1:\n",
        "        target_col = co2_candidates[0]\n",
        "        print(f\"✅ 自動識別CO2目標變數: {target_col}\")\n",
        "        return target_col\n",
        "    elif len(co2_candidates) > 1:\n",
        "        print(f\"發現多個CO2欄位: {co2_candidates}\")\n",
        "        print(f\"使用第一個: {co2_candidates[0]}\")\n",
        "        return co2_candidates[0]\n",
        "    else:\n",
        "        print(\"❌ 未找到CO2目標變數，請手動指定\")\n",
        "        return None\n",
        "\n",
        "def validate_features(df, feature_columns, target_column):\n",
        "    \"\"\"驗證特徵品質\"\"\"\n",
        "    print(\"\\n=== 特徵品質驗證 ===\")\n",
        "\n",
        "    # 檢查特徵的統計資訊\n",
        "    feature_stats = {}\n",
        "\n",
        "    for col in feature_columns:\n",
        "        if col in df.columns:\n",
        "            stats = {\n",
        "                'missing_rate': df[col].isnull().sum() / len(df),\n",
        "                'unique_values': df[col].nunique(),\n",
        "                'variance': df[col].var() if df[col].dtype in ['int64', 'float64'] else 0\n",
        "            }\n",
        "            feature_stats[col] = stats\n",
        "\n",
        "    # 識別潛在問題\n",
        "    problematic_features = []\n",
        "\n",
        "    for col, stats in feature_stats.items():\n",
        "        if stats['missing_rate'] > 0.5:\n",
        "            problematic_features.append(f\"{col}: 缺失率過高 ({stats['missing_rate']:.1%})\")\n",
        "        elif stats['unique_values'] == 1:\n",
        "            problematic_features.append(f\"{col}: 只有單一值\")\n",
        "        elif stats['variance'] == 0:\n",
        "            problematic_features.append(f\"{col}: 方差為零\")\n",
        "\n",
        "    if problematic_features:\n",
        "        print(\"⚠️ 發現問題特徵:\")\n",
        "        for problem in problematic_features:\n",
        "            print(f\"  - {problem}\")\n",
        "    else:\n",
        "        print(\"✅ 所有特徵品質良好\")\n",
        "\n",
        "    # 檢查特徵與目標變數的相關性（僅數值型）\n",
        "    if target_column and target_column in df.columns:\n",
        "        numeric_features = [col for col in feature_columns\n",
        "                          if col in df.columns and df[col].dtype in ['int64', 'float64']]\n",
        "\n",
        "        if len(numeric_features) > 0:\n",
        "            try:\n",
        "                # 計算相關性矩陣\n",
        "                corr_matrix = df[numeric_features + [target_column]].corr()\n",
        "                correlations = corr_matrix[target_column].abs()\n",
        "                # 修正 sort_values 語法\n",
        "                correlations = correlations.sort_values(ascending=False)\n",
        "\n",
        "                print(f\"\\n與{target_column}相關性最高的前5個特徵:\")\n",
        "                count = 0\n",
        "                for feature, corr in correlations.items():\n",
        "                    if feature != target_column and count < 5:  # 排除目標變數自己，只顯示前5個\n",
        "                        print(f\"  {count+1}. {feature}: {corr:.3f}\")\n",
        "                        count += 1\n",
        "            except Exception as e:\n",
        "                print(f\"計算相關性時出錯: {e}\")\n",
        "                print(\"跳過相關性分析\")\n",
        "\n",
        "    return feature_stats\n",
        "\n",
        "# 使用範例\n",
        "feature_columns = create_features(df)\n",
        "target_column = get_target_column(df)\n",
        "feature_stats = validate_features(df, feature_columns, target_column)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bOGqdHs_f0iy",
        "outputId": "2d7c2cbd-55f8-4b0c-9151-cb895921b537"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "創建特徵...\n",
            "\n",
            "=== 可用特徵摘要 ===\n",
            "basic_sensors: ['Indoor_Temp', 'Indoor_Humidity', 'CO2', 'Outdoor_Temp', 'Outdoor_Humidity']\n",
            "time_features: ['Hour', 'DayOfWeek', 'Month', 'IsWeekend', 'IsWorkingHour']\n",
            "meeting_features: ['Meeting_Status', 'Is_Meeting', 'Pre_Cooling']\n",
            "equipment_features: ['AC_Running', 'Power_Consumption']\n",
            "co2_derived: ['CO2_diff_5min', 'CO2_diff_15min', 'CO2_diff_30min', 'CO2_change_rate', 'CO2_MA_15min', 'CO2_MA_30min', 'CO2_STD_30min']\n",
            "temp_derived: ['Temp_Diff_Indoor_Outdoor', 'Indoor_Temp_Change', 'Outdoor_Temp_Change']\n",
            "energy_features: ['Energy_kWh', 'Daily_Cumulative_Energy']\n",
            "efficiency_features: ['Cooling_Efficiency', 'Ventilation_Efficiency']\n",
            "\n",
            "總共可用特徵數量: 29\n",
            "\n",
            "=== 特徵重要性預估 ===\n",
            "high_importance: ['Meeting_Status', 'Is_Meeting', 'CO2_MA_15min', 'CO2_diff_5min']\n",
            "medium_importance: ['Indoor_Temp', 'Indoor_Humidity', 'Hour', 'IsWorkingHour']\n",
            "low_importance: ['Month', 'DayOfWeek', 'Outdoor_Temp']\n",
            "\n",
            "✅ 找到CO2目標變數: CO2\n",
            "✅ 自動識別CO2目標變數: CO2\n",
            "\n",
            "=== 特徵品質驗證 ===\n",
            "⚠️ 發現問題特徵:\n",
            "  - IsWeekend: 方差為零\n",
            "  - IsWorkingHour: 方差為零\n",
            "  - Meeting_Status: 方差為零\n",
            "  - Is_Meeting: 方差為零\n",
            "  - Pre_Cooling: 方差為零\n",
            "  - AC_Running: 方差為零\n",
            "計算相關性時出錯: DataFrame.sort_values() missing 1 required positional argument: 'by'\n",
            "跳過相關性分析\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def identify_target_column(df):\n",
        "    \"\"\"識別CO2目標變數\"\"\"\n",
        "    co2_columns = [col for col in df.columns if 'co2' in col.lower()]\n",
        "\n",
        "    if len(co2_columns) == 0:\n",
        "        print(\"未找到CO2相關欄位，請手動指定:\")\n",
        "        print(\"可用欄位:\", list(df.columns))\n",
        "        # 假設CO2是某個數值欄位\n",
        "        numeric_cols = df.select_dtypes(include=[np.number]).columns\n",
        "        co2_column = numeric_cols[0]  # 取第一個數值欄位作為示例\n",
        "    else:\n",
        "        co2_column = co2_columns[0]\n",
        "\n",
        "    print(f\"使用CO2欄位: {co2_column}\")\n",
        "    return co2_column\n",
        "\n",
        "co2_column = identify_target_column(df)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7ReZEhVjf2qe",
        "outputId": "67f6a8be-57b2-480a-99a0-d128bdec2b6a"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "使用CO2欄位: CO2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def visualize_data(df, co2_column, feature_columns):\n",
        "    \"\"\"數據視覺化\"\"\"\n",
        "    plt.figure(figsize=(15, 12))\n",
        "\n",
        "    # CO2時間序列\n",
        "    plt.subplot(3, 2, 1)\n",
        "    plt.plot(df.index, df[co2_column])\n",
        "    plt.title(f'{co2_column} 時間序列')\n",
        "    plt.ylabel('CO2 (ppm)')\n",
        "\n",
        "    # CO2分布\n",
        "    plt.subplot(3, 2, 2)\n",
        "    plt.hist(df[co2_column], bins=50, alpha=0.7)\n",
        "    plt.title(f'{co2_column} 分布')\n",
        "    plt.xlabel('CO2 (ppm)')\n",
        "\n",
        "    # 相關性熱圖\n",
        "    plt.subplot(3, 2, 3)\n",
        "    numeric_features = [col for col in feature_columns if df[col].dtype in ['int64', 'float64']][:6]\n",
        "    if len(numeric_features) > 1:\n",
        "        corr_data = df[numeric_features + [co2_column]].corr()\n",
        "        sns.heatmap(corr_data, annot=True, cmap='coolwarm', center=0)\n",
        "        plt.title('特徵相關性')\n",
        "\n",
        "    # CO2與主要特徵的關係\n",
        "    if len(numeric_features) >= 2:\n",
        "        plt.subplot(3, 2, 4)\n",
        "        plt.scatter(df[numeric_features[0]], df[co2_column], alpha=0.5)\n",
        "        plt.xlabel(numeric_features[0])\n",
        "        plt.ylabel(co2_column)\n",
        "        plt.title(f'{co2_column} vs {numeric_features[0]}')\n",
        "\n",
        "    # 每日模式\n",
        "    plt.subplot(3, 2, 5)\n",
        "    if 'hour' in df.columns:\n",
        "        hourly_avg = df.groupby('hour')[co2_column].mean()\n",
        "        plt.plot(hourly_avg.index, hourly_avg.values)\n",
        "        plt.title('每小時平均CO2')\n",
        "        plt.xlabel('小時')\n",
        "        plt.ylabel('CO2 (ppm)')\n",
        "\n",
        "    # 週模式\n",
        "    plt.subplot(3, 2, 6)\n",
        "    if 'weekday' in df.columns:\n",
        "        daily_avg = df.groupby('weekday')[co2_column].mean()\n",
        "        weekdays = ['周一', '周二', '周三', '周四', '周五', '周六', '周日']\n",
        "        plt.bar(range(len(daily_avg)), daily_avg.values)\n",
        "        plt.title('每週平均CO2')\n",
        "        plt.xlabel('星期')\n",
        "        plt.ylabel('CO2 (ppm)')\n",
        "        plt.xticks(range(len(weekdays)), weekdays, rotation=45)\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "visualize_data(df, co2_column, feature_columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "XukVlzbDf51F",
        "outputId": "4702eb49-c285-41e5-fa95-0dcb1b64fc9b"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/usr/local/lib/python3.11/dist-packages/seaborn/utils.py:61: UserWarning: Glyph 26178 (\\N{CJK UNIFIED IDEOGRAPH-6642}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.draw()\n",
            "/usr/local/lib/python3.11/dist-packages/seaborn/utils.py:61: UserWarning: Glyph 38291 (\\N{CJK UNIFIED IDEOGRAPH-9593}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.draw()\n",
            "/usr/local/lib/python3.11/dist-packages/seaborn/utils.py:61: UserWarning: Glyph 24207 (\\N{CJK UNIFIED IDEOGRAPH-5E8F}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.draw()\n",
            "/usr/local/lib/python3.11/dist-packages/seaborn/utils.py:61: UserWarning: Glyph 21015 (\\N{CJK UNIFIED IDEOGRAPH-5217}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.draw()\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/usr/local/lib/python3.11/dist-packages/seaborn/utils.py:61: UserWarning: Glyph 20998 (\\N{CJK UNIFIED IDEOGRAPH-5206}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.draw()\n",
            "/usr/local/lib/python3.11/dist-packages/seaborn/utils.py:61: UserWarning: Glyph 24067 (\\N{CJK UNIFIED IDEOGRAPH-5E03}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.draw()\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/tmp/ipython-input-1448815724.py:53: UserWarning: Glyph 29305 (\\N{CJK UNIFIED IDEOGRAPH-7279}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-1448815724.py:53: UserWarning: Glyph 24501 (\\N{CJK UNIFIED IDEOGRAPH-5FB5}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-1448815724.py:53: UserWarning: Glyph 30456 (\\N{CJK UNIFIED IDEOGRAPH-76F8}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-1448815724.py:53: UserWarning: Glyph 38364 (\\N{CJK UNIFIED IDEOGRAPH-95DC}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-1448815724.py:53: UserWarning: Glyph 24615 (\\N{CJK UNIFIED IDEOGRAPH-6027}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/tmp/ipython-input-1448815724.py:53: UserWarning: Glyph 23567 (\\N{CJK UNIFIED IDEOGRAPH-5C0F}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-1448815724.py:53: UserWarning: Glyph 26178 (\\N{CJK UNIFIED IDEOGRAPH-6642}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/tmp/ipython-input-1448815724.py:53: UserWarning: Glyph 27599 (\\N{CJK UNIFIED IDEOGRAPH-6BCF}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-1448815724.py:53: UserWarning: Glyph 24179 (\\N{CJK UNIFIED IDEOGRAPH-5E73}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-1448815724.py:53: UserWarning: Glyph 22343 (\\N{CJK UNIFIED IDEOGRAPH-5747}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/tmp/ipython-input-1448815724.py:53: UserWarning: Glyph 21608 (\\N{CJK UNIFIED IDEOGRAPH-5468}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-1448815724.py:53: UserWarning: Glyph 19968 (\\N{CJK UNIFIED IDEOGRAPH-4E00}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/tmp/ipython-input-1448815724.py:53: UserWarning: Glyph 20108 (\\N{CJK UNIFIED IDEOGRAPH-4E8C}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/tmp/ipython-input-1448815724.py:53: UserWarning: Glyph 19977 (\\N{CJK UNIFIED IDEOGRAPH-4E09}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/tmp/ipython-input-1448815724.py:53: UserWarning: Glyph 22235 (\\N{CJK UNIFIED IDEOGRAPH-56DB}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/tmp/ipython-input-1448815724.py:53: UserWarning: Glyph 20116 (\\N{CJK UNIFIED IDEOGRAPH-4E94}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/tmp/ipython-input-1448815724.py:53: UserWarning: Glyph 20845 (\\N{CJK UNIFIED IDEOGRAPH-516D}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/tmp/ipython-input-1448815724.py:53: UserWarning: Glyph 26085 (\\N{CJK UNIFIED IDEOGRAPH-65E5}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/tmp/ipython-input-1448815724.py:53: UserWarning: Glyph 26143 (\\N{CJK UNIFIED IDEOGRAPH-661F}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-1448815724.py:53: UserWarning: Glyph 26399 (\\N{CJK UNIFIED IDEOGRAPH-671F}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/tmp/ipython-input-1448815724.py:53: UserWarning: Glyph 36913 (\\N{CJK UNIFIED IDEOGRAPH-9031}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 26178 (\\N{CJK UNIFIED IDEOGRAPH-6642}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 38291 (\\N{CJK UNIFIED IDEOGRAPH-9593}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 24207 (\\N{CJK UNIFIED IDEOGRAPH-5E8F}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 21015 (\\N{CJK UNIFIED IDEOGRAPH-5217}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 20998 (\\N{CJK UNIFIED IDEOGRAPH-5206}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 24067 (\\N{CJK UNIFIED IDEOGRAPH-5E03}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 29305 (\\N{CJK UNIFIED IDEOGRAPH-7279}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 24501 (\\N{CJK UNIFIED IDEOGRAPH-5FB5}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 30456 (\\N{CJK UNIFIED IDEOGRAPH-76F8}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 38364 (\\N{CJK UNIFIED IDEOGRAPH-95DC}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 24615 (\\N{CJK UNIFIED IDEOGRAPH-6027}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 27599 (\\N{CJK UNIFIED IDEOGRAPH-6BCF}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 23567 (\\N{CJK UNIFIED IDEOGRAPH-5C0F}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 24179 (\\N{CJK UNIFIED IDEOGRAPH-5E73}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 22343 (\\N{CJK UNIFIED IDEOGRAPH-5747}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 36913 (\\N{CJK UNIFIED IDEOGRAPH-9031}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 21608 (\\N{CJK UNIFIED IDEOGRAPH-5468}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 19968 (\\N{CJK UNIFIED IDEOGRAPH-4E00}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 20108 (\\N{CJK UNIFIED IDEOGRAPH-4E8C}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 19977 (\\N{CJK UNIFIED IDEOGRAPH-4E09}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 22235 (\\N{CJK UNIFIED IDEOGRAPH-56DB}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 20116 (\\N{CJK UNIFIED IDEOGRAPH-4E94}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 20845 (\\N{CJK UNIFIED IDEOGRAPH-516D}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 26085 (\\N{CJK UNIFIED IDEOGRAPH-65E5}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 26143 (\\N{CJK UNIFIED IDEOGRAPH-661F}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 26399 (\\N{CJK UNIFIED IDEOGRAPH-671F}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: SimHei\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1200 with 7 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABc8AAASlCAYAAAB+9iEyAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQABAABJREFUeJzs3Xl4U2XaBvA7SZt0TVe6QYGy7/tWRWUEKZuKMCoOo6gMLgN+IiMoiqi4gOAoggyugI4g7jACVpEdKVu17JRFdmgLlDbd0yTn+yM5p0mattmTtvfvunqR5rxN3iSnIX3Oc+5XJgiCACIiIiIiIiIiIiIiksh9PQEiIiIiIiIiIiIiIn/D4jkRERERERERERERkRUWz4mIiIiIiIiIiIiIrLB4TkRERERERERERERkhcVzIiIiIiIiIiIiIiIrLJ4TEREREREREREREVlh8ZyIiIiIiIiIiIiIyAqL50REREREREREREREVlg8JyIiIiIiIiIiIiKywuI5EREREREREREREZEVFs+JiMgvnT59Go8//jhatWqFoKAgqNVq3HzzzXjvvfdQVlZmMbayshKLFi1C3759ER4ejrCwMPTt2xeLFi1CZWWlxdjS0lIsWbIEQ4cORWJiIsLDw9GzZ08sXboUer3emw+RiIiIiMgu/GxMROQbLJ4TEZHfWb9+Pbp27Yqvv/4ad955JxYvXoy5c+eiefPmmD59Op5++mlpbElJCe644w48/fTTSEhIwLx587BgwQIkJSXh6aefxh133IGSkhJp/J9//omnnnoKgiBg2rRpePvtt5GSkoJ//vOfePTRR+uc24ABAxAaGoqwsLBqX8HBwXj55Zd9Oo6IiIiIGpbG9NmYiMjfBPh6AkRERObOnDmDcePGoUWLFti8eTMSExOlbZMnT8apU6ewfv166bpp06Zh27ZtWLx4MaZMmSJd/+STT2LJkiWYMmUKnn32WSxduhQAkJCQgEOHDqFz587S2McffxyPPvooli9fjpdeeglt2rSpcX46nQ4HDhywOeaDDz7AxYsXfTqOiIiIiBqOxvbZmIjI37DznIiI/Mr8+fNRXFyMTz/91OKPA1GbNm2k7pqLFy/i008/xe23327xx4Fo8uTJ+Mtf/oJPPvlE+kAeGxtr8ceB6J577gEAHDt2zJ0Ph4iIiIjIafxsTETkWyyeExGRX/nxxx/RqlUr3HTTTXWO/emnn6DX6/HQQw/VOOahhx6CTqdDenp6rbeVk5MDwPgHBBERERGRP+BnYyIi32LxnIiI/IZGo8GlS5fQtWtXu8YfPXoUANC9e/cax4jbauua0Wq1WLhwIVJSUtC3b18HZkxERERE5Bn8bExE5HvMPCciIr+h0WgAAOHh4XaNLyoqqnO8uE28bVumTJmCo0ePYv369QgI4H+NREREROR7/GxMROR77DwnIiK/oVarAVR98K+L+OG/tvF1/RGxYMECfPzxx3jttdcwYsQIR6ZLREREROQx/GxMROR7LJ4TEZHfUKvVSEpKwuHDh+0a37FjRwDAwYMHaxwjbuvUqVO1bStWrMBzzz2HJ554ArNmzXJixkREREREnsHPxkREvsfiORER+ZVRo0bh9OnTyMjIqHPs8OHDoVAo8N///rfGMZ9//jkCAgIwbNgwi+vXrl2Lf/zjHxgzZgyWLFni8ryJiIiIiNyNn42JiHyLxXMiIvIrM2bMQGhoKP7xj38gNze32vbTp0/jvffeAwAkJyfjkUcewa+//oqlS5dWG/vBBx9g8+bNmDhxIpo1ayZdv337dowbNw633norVq5cCbmc/x0SERERkf/hZ2MiIt/iyg9ERORXWrdujVWrVuH+++9Hx44d8dBDD6FLly7QarXYtWsXvvnmGzz88MPS+HfffRfHjx/HP//5T6Snp0tdND///DPWrl2L2267Df/+97+l8efOncNdd90FmUyGv/71r/jmm28s7r9bt27o1q2bVx4rEREREVFt+NmYiMi3WDwnIiK/c9ddd+HgwYNYsGAB1q5di6VLl0KlUqFbt27497//jUmTJkljw8LCsGnTJvznP//BF198genTp0MQBHTo0AELFy7EP//5TwQGBkrjz5w5g8LCQgDA5MmTq933yy+/zD8QiIiIiMhv8LMxEZHvsHhORER+qW3btvjoo4/sGqtUKjF16lRMnTq1zrGDBg2CIAguzo6IiIiIyHv42ZiIyDcYZEVEREREREREREREZIWd50RERA7q1auXzYWUtFotpk2b5vNxRERERETews+yRNSQyQSen0NEREREREREREREZIGxLUREREREREREREREVlg8JyIiIiIiIiIiIiKywsxzcpnBYMDly5cRHh4OmUzm6+kQERERkZMEQUBRURGSkpJs5tI2ZvzMS0RERNQwOPKZl8Vzctnly5eRnJzs62kQERERkZtcuHABzZo18/U0/Ao/8xIRERE1LPZ85mXxnFwWHh4OwLjDqdVqH8+GiIiIiJyl0WiQnJwsfb6jKvzMS0RERNQwOPKZl8Vzcpl42qpareYfEkREREQNAGNJquNnXiIiIqKGxZ7PvAwyJCIiIiIiIiIiIiKywuK5H5s7dy769u2L8PBwxMXFYfTo0cjOzrYYU15ejsmTJyMmJgZhYWEYO3YscnNzLcacP38eI0eOREhICOLi4jB9+nTodDqLMVu3bkWvXr2gUqnQpk0brFixwtMPj4iIiIiIiIiIiMhvsXjux7Zt24bJkydj9+7d2LhxIyorKzF06FCUlJRIY5555hn8+OOP+Oabb7Bt2zZcvnwZY8aMkbbr9XqMHDkSWq0Wu3btwmeffYYVK1Zg9uzZ0pgzZ85g5MiR+Mtf/oKsrCxMnToV//jHP/Dzzz979fESERERERERERER+QuZIAiCrydB9rl69Sri4uKwbds23HrrrSgsLESTJk2watUq/PWvfwUAHD9+HB07dkRGRgYGDBiAn376CaNGjcLly5cRHx8PAPjggw/w3HPP4erVq1AqlXjuueewfv16HD58WLqvcePGoaCgAOnp6dXmUVFRgYqKCul7MWS/sLCQ+Y9ERERE9ZhGo0FERAQ/19nA54aIiIioYXDkcx07z+uRwsJCAEB0dDQAIDMzE5WVlRgyZIg0pkOHDmjevDkyMjIAABkZGejatatUOAeAtLQ0aDQaHDlyRBpjfhviGPE2rM2dOxcRERHSV3JysvseJBEREREREREREZEfYPG8njAYDJg6dSpuvvlmdOnSBQCQk5MDpVKJyMhIi7Hx8fHIycmRxpgXzsXt4rbaxmg0GpSVlVWby8yZM1FYWCh9XbhwwS2PkYiIiIiIiIiIiMhfBPh6AmSfyZMn4/Dhw9i5c6evpwKVSgWVSuXraRARERERERERERF5DDvP64EpU6Zg3bp12LJlC5o1ayZdn5CQAK1Wi4KCAovxubm5SEhIkMbk5uZW2y5uq22MWq1GcHCwux8OUYO390w+8ku0vp4GERERERERERG5gMVzPyYIAqZMmYIffvgBmzdvRkpKisX23r17IzAwEJs2bZKuy87Oxvnz55GamgoASE1NxaFDh5CXlyeN2bhxI9RqNTp16iSNMb8NcYx4G0Rkv5+P5OC+DzNw/4e21wwgIiIiIiIiIqL6gbEtfmzy5MlYtWoV1q5di/DwcCmjPCIiAsHBwYiIiMDEiRMxbdo0REdHQ61W46mnnkJqaioGDBgAABg6dCg6deqEBx98EPPnz0dOTg5mzZqFyZMnS9ErTzzxBN5//33MmDEDjz76KDZv3oyvv/4a69ev99ljJ6qvVu05DwA4mVfs45kQERERUX01ccU+u8d++nBfD86EiIiocWPnuR9bunQpCgsLMWjQICQmJkpfX331lTTm3XffxahRozB27FjceuutSEhIwPfffy9tVygUWLduHRQKBVJTU/H3v/8dDz30EObMmSONSUlJwfr167Fx40Z0794d//73v/HJJ58gLS3Nq4+XqCG4Ucq4FiIiIiIiIiKihoCd535MEIQ6xwQFBWHJkiVYsmRJjWNatGiBDRs21Ho7gwYNwh9//OHwHInIEovnREREREREREQNAzvPiWxYf/AKtmbn1T2QyEpBSaWvp0BERERERERERG7AznMiKwWlWkxe9TsA4OicNIQo+WtC9iuq0Pl6CkRERERERERE5AbsPCeyoimrKn5eLarw4UyIiIiIiIiIiIjIV1g8J7JSWllVPNfqDD6cCREREREREREREfkKi+dEVkq1eulyBYvn5CSZzNczICIiIiIiIiIiV7B4TmSljMVzcgOlgm+vRERERERERET1Gas7RFZKKhjbQs6p1FftL4EsnhMRERERERER1Wus7hBZKaus6jw3CIIPZ0L1jfmZCoEK5rYQEREREREREdVnLJ4TWTHPPNcZWDwn+1WYHXgJYOc5EREREREREVG9xuoOkRXz4rmBxXNygHnnOU9aICIiIiIiIiKq31g8J7JSapZ5zs5zcoRl8Zz7DhERERERERFRfcbiOZGVUrPoDT2L5+SAovJK6TLz8omIiIiIiIiI6jcWz4mslGlZPCfnXC/RSpe57xARERERERER1W8snhNZ0ZRVdQ/r2T1MDqhk5jkRERERERERUYPB4jmRlQLz4rnBUMtIIkvm3eaMbSEiIiIiIiIiqt9YPCeyUlBaFb2h07MASvYzX2CWZy0QEREREREREdVvLJ4TWdGU66TL7B4mR+jMzlRg5DkRERERERERUf3G4jmRFfMFQ3WsgJIDzM9UEHjghYiIiIiIiIioXmPxnMhKWWVV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REREbiRj63mtuGCoffg0ERERERER+R6L50RERG5kvrAiF1kkIiIiIiIiqr9YPCciIiKvYWyLffg0ERERERER+R6L50RERG5kXvRkAbQ6xrbUT9yXiYiIiIioMWLxnIiIyI0YeU5ERERERETUMLB4TkRERERERERERERkhcVzIiIiD2G+NzUUXPyWiIiIiIgaowBfT4CIiKihYrmRiIiIqPGauGKf3WM/fbivB2dCRETOYuc5EREREdWKJ1EQEREREVFjxOI5ERGRh7DgSERERERERFR/sXhORERERLXicSAiIiIiImqMmHlORERERERERORDjuSjA8xIJyLyFnaeExEReYiM/bpERERERERE9RaL50RERERUKxkD/ImIiIiIqBFi8ZyIiIiIiIiIiIiIyAqL50RERERUK/adExERERFRY8TiORERERERERERERGRFRbPiYiIiKhWjDwnIiIiIqLGKMDXEyAiImqoBAi+ngIRERERNUATV+yze+ynD/f1i3kAnp0LEZEnsPOciIiIiIiIiIiIiMgKO89JsmTJEixYsAA5OTno3r07Fi9ejH79+vl6WkRE9ZaMyyxSAyFjbgsREVGj4Wg3ORFRQ8bOcwIAfPXVV5g2bRpefvll/P777+jevTvS0tKQl5fn66kREREREREREREReR2L5wQAeOeddzBp0iQ88sgj6NSpEz744AOEhIRg2bJlvp4aERERERERERERkdcxtoWg1WqRmZmJmTNnStfJ5XIMGTIEGRkZ1cZXVFSgoqJC+l6j0XhlnkTkf9rHh/t6Cn5HFaCQLgcofB91kRAR5OspWOiYqMaeM/m+nkY1beLCfD0FC7FhKl9PAWEq//qY2Cwq2NdTsNAhIRzHc4oQHuRfzxMREZE1xrAQETmPn/YJ165dg16vR3x8vMX18fHxOH78eLXxc+fOxauvvuqt6RGRH1r/fwPxxe7zeGZIW19Pxe9EhARi1siOkMtkCPWD4uN9fZJxMrcYA9vE+noqAIBFD/TEwl9P4qHUFr6eCgBg7eSb8dX+C3h2aHtfTwUAsORvvXDgYgHu6Bhf92APax4Tgulp7RERHOjrqQAAJg5MQa6mHEP84LkBgE8m9MGSLacwcWCKr6dCRERUbzhSyP/04b4enAkRkX1kgiAIvp4E+dbly5fRtGlT7Nq1C6mpqdL1M2bMwLZt27Bn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66677rIyMjIst9ttnXTSSdbSpUsjzrF161brggsusGJjY634+Hhr4MCBVkFBQUTMb7/9Zh177LGW2+226tSpYz300ENVNUT5h/L+rQFrwoQJ4ZiSkhLr2muvtZKSkqzo6GjrzDPPtDZu3BhxnjVr1lh9+/a1oqKirNTUVOvGG2+0AoFARMysWbOsDh06WC6Xy2rUqFHENaRqXH755Vb9+vUtl8tlpaWlWSeddFI4cW5Z+rc+HJRNnuvfXOS/O1x/393b7xBr1661jj/+eCs5Odlyu91WkyZNrJtvvtnKy8uLOM++fMYczM4//3yrVq1alsvlsurUqWOdf/751ooVK8L7D9Tn8MFu2rRpFrDb3xWH68+R/ibbuz3do9WrV1f4GTVr1izLsizr559/to4++mgrISHB8ng8VsuWLa0HHnggInFsWYfuPSouLrZ69eplpaWlWU6n06pfv7515ZVX7vbw93D+Odrp+eeft6Kioqzc3Nzdjj/Uf44OtnyBsaPTIiIiIiIiIiIiIiKyg2qei4iIiIiIiIiIiIiUoeS5iIiIiIiIiIiIiEgZSp6LiIiIiIiIiIiIiJSh5LmIiIiIiIiIiIiISBlKnouIiIiIiIiIiIiIlKHkuYiIiIiIiIiIiIhIGUqei4iIiIiIiIiIiIiUoeS5iIiIiIiIiMhhbsaMGbRs2ZJQKFTdXeHPP/8kKyuLoqKi6u6KiBzmlDwXEREREREREakmmzZt4rrrrqNRo0a43W7q1q1Lv379mDFjRkTc999/zymnnEJSUhIej4e2bdvyxBNPRCS716xZw6BBg2jYsCFRUVE0btyYUaNG4ff799qPW265hTvvvBO73X7Ax7i/WrVqRZcuXXjiiSequysicphT8lxEREREREREpBqsWbOGTp06MXPmTB599FF+//13pk6dygknnMCQIUPCcR9++CHdu3cnKyuLWbNmsWTJEoYNG8Z9991H//79sSwLgCVLlmCaJs8//zx//PEHTz75JOPHj+f222/fYz++++47Vq5cydlnn12p490fAwcOZNy4cQSDweruiogcxgxr5yesiIiIiIiIiIhUmVNOOYWFCxeydOlSYmJiIvbl5uaSmJhIUVER9evXp3v37rz//vsRMZ9++imnn346b731Fueff36513j00UcZN24cq1atqrAfQ4cOJTs7m3fffTfcds899/DRRx9xzTXXcN9997F161ZOO+00XnzxRRISEgAYMGAAubm5dOzYkWeeeQafz8eFF17I008/jcvlAqBHjx60bdsWu93Oq6++isvl4r777uPCCy9k6NChvPfee2RkZDB27Fj69u0bvr7f7yc+Pp4pU6Zw0kkn7d+NFRE5QDTzXERERERERESkim3bto2pU6cyZMiQ3RLnAImJiQB8+eWXbN26lZtuumm3mH79+tGsWTPefPPNCq+Tl5dHcnLyHvvy7bffcuSRR+7WvmLFCt555x0+/fRTpk6dyq+//sq1114bETNjxgwWL17M7NmzefPNN/nggw8YPXp0RMyrr75Kamoq8+fP57rrruOaa67h3HPP5ZhjjuGXX36hV69eXHLJJRQXF4ePcblcdOjQgW+//XaPfRcRqUxKnouIiIiIiIiIVLEVK1ZgWRYtWrTYY9yyZcsAaNmyZbn7W7RoEY4p7xpjx47lqquu2uM1/vrrL2rXrr1bu9fr5bXXXqNDhw4cf/zxjB07lrfeeotNmzaFY1wuF6+88gqtW7fm1FNP5d577+Xpp5/GNM1wTPv27bnzzjtp2rQpt912Gx6Ph9TUVK688kqaNm3K3XffzdatW1m4cGHE9WvXrs1ff/21x76LiFQmJc9FRERERERERKrY/lbR3d/49evX06dPH84991yuvPLKPcaWlJTg8Xh2a69Xrx516tQJv+7atSumabJ06dJwW/v27YmOjo6IKSwsZN26deG2du3ahf/bbreTkpJC27Ztw20ZGRkA5OTkRFw/KioqYja6iEhVU/JcRERERERERKSKNW3aFMMwWLJkyR7jmjVrBsDixYvL3b948eJwzE4bNmzghBNO4JhjjuGFF17Ya19SU1PZvn37PvZ8/zmdzojXhmFEtBmGARAxWx1KS9ukpaVVWr9ERPZGyXMRERERERERkSqWnJxM7969efbZZykqKtptf25uLgC9evUiOTmZxx9/fLeYTz75hOXLl3PBBReE29avX0+PHj3o1KkTEyZMwGbbe+qnY8eO/Pnnn7u1r127lg0bNoRfz5s3D5vNRvPmzcNtv/32GyUlJRExsbGx1K1bd6/X3ZtFixbRsWPH/3weEZF/S8lzEREREREREZFq8OyzzxIKhejcuTPvv/8+y5cvZ/HixTz99NN07doVgJiYGJ5//nk+/vhjBg8ezMKFC1mzZg0vv/wyAwYM4JxzzuG8884DdiXO69Wrx2OPPcbmzZvZtGlTRI3y8vTu3Zvvvvtut3aPx8Nll13Gb7/9xrfffsv111/PeeedR2ZmZjjG7/czaNAg/vzzTz7//HNGjRrF0KFD9ylpvydr1qxh/fr19OzZ8z+dR0Tkv3BUdwdERERERERERA5HjRo14pdffuH+++/nxhtvZOPGjaSlpdGpUyfGjRsXjjvnnHOYNWsW999/P8cddxxer5emTZtyxx13MHz48HDZk6+++ooVK1awYsUKsrKyIq61p5rpF110EbfccgtLly6NmFXepEkTzjrrLE455RS2bdvGaaedxnPPPRdx7EknnUTTpk05/vjj8fl8XHDBBdxzzz3/+d68+eab9OrVi/r16//nc4mI/FuGtb8rToiIiIiIiIiIyCHl5ptvJj8/n+effx6Ae+65h48++ogFCxZUeMyAAQPIzc3lo48+OqB98fv9NG3alMmTJ9OtW7cDem4Rkf2hsi0iIiIiIiIiIoe5O+64g/r16++2aGd1WLt2LbfffrsS5yJS7VS2RURERERERETkMJeYmMjtt99e3d0ASsvFNGnSpLq7ISKisi0iIiIiIiIiIiIiImWpbIuIiIiIiIiIiIiISBlKnouIiIiIiIiIiIiIlKHkuYiIiIiIiIiIiIhIGUqei4iIiIiIiIiIiIiUoeS5iIiIiIiIiIiIiEgZSp6LiIiIiIiIiIiIiJSh5LmIiIiIiIiIiIiISBlKnouIiIiIiIiIiIiIlKHkuYiIiIiIiIiIiIhIGUqei4iIiIiIiIiIiIiUoeS5iIiIiIiIiIiIiEgZSp6LiIiIiIiIiIiIiJSh5LmIiIiIiIiIiIiISBlKnouIiIiIiIiIiIiIlKHkuYiIiIiIiIiIiIhIGUqei4iIiIiIiIiIiIiUoeS5iIiIiIiIiIiIiEgZSp6LiIiIiIiIiIiIiJSh5LmIiIiIiIiIiIiISBlKnouIiIiIiIiIiIiIlKHkuYiIiIiIiIiIiIhIGUqei4iIiIiIiIiIiIiUoeS5iIiIiIiIiIiIiEgZSp6LiIiIiIiIiIiIiJSh5LmIiIiIiIiIiIiISBlKnouIiIiIiIiIiIiIlKHkuYiIiIiIiIiIiIhIGUqei4iIiIiIiIiIiIiUoeS5iIiIiIiIiIiIiEgZSp6LiIiIiIiIiIiIiJSh5LmIiIiIiIiIiIiISBlKnouIiIiIiIiIiIiIlKHkuYiIiIiIiIiIiIhIGUqei4iIiIiIiIiIiIiUoeS5iIiIiIiIiIiIiEgZSp6LiIiIiIiIiIiIiJSh5LmIiIiIiIiIiIiISBlKnouIiIiIiIiIiIiIlKHkuYiIiIiIiIiIiIhIGUqei4iIiIiIiIiIiIiUoeS5iIiIiIiIiIiIiEgZSp6LiIiIiIiIiIiIiJSh5LmIiIiIiIiIiIiISBlKnouIiIiIiIiIiIiIlKHkuYiIiIiIiIiIiIhIGUqei4iIiIiIiIiIiIiUoeS5iIiIiIiIiIiIiEgZSp6LiIiIiIiIiIiIiJSh5LmIiIiIiIiIiIiISBlKnouIiIiIiIiIiIiIlKHkuYiIiIiIiIiIiIhIGUqei4iIiIiIiIiIiIiUoeS5iIiIiIiIiIiIiEgZSp6LiIiIiIiIiIiIiJSh5LmIiIiIiIiIiIiISBlKnouIiIiIiIiIiIiIlKHkuYiIiIiIiIiIiIhIGUqei4iIiIiIiIiIiIiUoeS5iIiIiIiIiIiIiEgZSp6LiIiIiIiIiIiIiJSh5LmIiIiIiIiIiIiISBlKnouIiIiIiIiIiIiIlKHkuYiIiIiIiIiIiIhIGUqei4iIiIiIiIiIiIiUoeS5iIiIiIiIiIiIiEgZSp6LiIiIiIiIiIiIiJSh5LmIiIiIiIiIiIiISBlKnouIiIiIiIiIiIiIlKHkuYiIiIiIiIiIiIhIGUqei4iIiIiIiIiIiIiUoeS5iIiIiIiIiIiIiEgZSp6LiIiIiIiIiIiIiJSh5LmIiIiIiIiIiIiISBlKnouIiIiIiIiIiIiIlKHkuYiIiIiIiIiIiIhIGUqei4iIiIiIiIiIiIiUoeS5iIiIiIiIiIiIiEgZSp6LiIiIiIiIiIiIiJSh5LmIiIiIiIiIiIiISBlKnouIiIiIiIiIiIiIlKHkuYiIiIiIiIiIiIhIGUqei4iIiIiIiIiIiIiUoeS5iIiIiIiIiIiIiEgZSp6LiIiIiIiIiIiIiJSh5LmIiIiIiIiIiIiISBlKnouIiIiIiIiIiIiIlKHkuYiIiIiIiIiIiIhIGUqei4iIiIiIiIiIiIiUoeS5iIiIiIiIiIiIiEgZSp6LiIiIiIiIiIiIiJSh5LmIiIiIiIiIiIiISBlKnouIiIiIiIiIiIiIlKHkuYiIiIiIiIiIiIhIGUqei4iIiIiIiIiIiIiUoeS5iIiIiIiIiIiIiEgZSp6LiIiIiIiIiIiIiJSh5LmIiIiIiIiIiIiISBlKnouIiIiIiIiIiIiIlKHkuYiIiIiIiIiIiIhIGUqei4iIiIiIiIiIiIiUoeS5iIiIiIiIiIiIiEgZSp6LiIiIiIiIiIiIiJSh5LmIiIiIiIiIiIiISBlKnouIiIiIiIiIiIiIlKHkuYiIiIiIiIiIiIhIGUqei4iIiIiIiIiIiIiUoeS5iIiIiIiIiIiIiEgZSp6LiIiIiIiIiIiIiJSh5LmIiIiIiIiIiERo0KABAwYMqO5uiIhUKyXPRUQOMX/88Qcul4vY2NhyN5fLtU8xK1eurLY4EREREZH9tXLlSq666ioaNWqEx+MhPj6ebt268dRTT1FSUhIRGwgEePrppznqqKOIi4sjNjaWo446iqeffppAIBARW1xczLPPPkuvXr2oVasWcXFxdOzYkXHjxhEKhapyiOVas2YNhmHw2GOPVXdXqsTEiRMxDGOvW4MGDaq7qyJyCHBUdwdEROTAsiyLzp07891335W7v0uXLvscU11xIiIiIiL7Y8qUKZx77rm43W4uvfRS2rRpg9/v57vvvuPmm2/mjz/+4IUXXgCgqKiIU089la+//prTTjuNAQMGYLPZmDp1KsOGDeODDz5gypQpxMTEALBq1Squu+46TjrpJEaMGEF8fDzTpk3j2muvZd68ebz66qvVOfTDzvHHH8/rr78e0XbFFVfQuXNnBg8eHG6LjY2t6q6JyCFIyXMREREREREROWitXr2a/v37U79+fWbOnEmtWrXC+4YMGcKKFSuYMmVKuG3EiBF8/fXXjB07lqFDh4bbr7nmGp599lmGDh3KTTfdxLhx4wDIzMzk999/p3Xr1uHYq666issvv5wJEyZw11130aRJkyoY6aEvGAximiYul6vCmEaNGtGoUaOItquvvppGjRpx8cUXV3YXReQwo7ItIiIiIiIiInLQeuSRRygsLOTll1+OSJzv1KRJE4YNGwbA33//zcsvv8yJJ54YkTjfaciQIZxwwgm89NJL/P333wCkpqZGJM53OvPMMwFYvHhxhX0LBAIkJyczcODA3fbl5+fj8Xi46aabwm1jx46ldevWREdHk5SUxJFHHsnkyZP3cgd2t7O0yZw5cxgxYgRpaWnExMRw5plnsnnz5ohYy7K47777yMrKIjo6mhNOOIE//vij3POuWrWKc889l+TkZKKjo+nSpUvEg4mdcnJyGDRoEBkZGXg8Htq3b7/bDP1/lpsZM2YMjRs3xu128+eff+73eMuzfv16Lr/8cjIyMnC73bRu3ZpXXnklImb27NkYhsE777zD6NGjqVOnDnFxcZxzzjnk5eXh8/kYPnw46enpxMbGMnDgQHw+X8Q5DMNg6NChTJo0iebNm+PxeOjUqRPffPPNARmHiFQvzTwXERERERERkYPWp59+SqNGjTjmmGP2GvvFF18QCoW49NJLK4y59NJLmTVrFlOnTuWKK66oMG7Tpk1AaXK9Ik6nkzPPPJMPPviA559/PmJG9UcffYTP56N///4AvPjii1x//fWcc845DBs2DK/Xy8KFC/nhhx+48MIL9zq28lx33XUkJSUxatQo1qxZw5gxYxg6dChvv/12OObuu+/mvvvu45RTTuGUU07hl19+oVevXvj9/ohzZWdnc8wxx1BcXMz1119PSkoKr776Kqeffjrvvfde+GFCSUkJPXr0YMWKFQwdOpSGDRvy7rvvMmDAAHJzc8MPMnaaMGECXq+XwYMH43a7SU5O/ldjLdvXLl26hBPbaWlpfPHFFwwaNIj8/HyGDx8eEf/ggw8SFRXFrbfeyooVKxg7dixOpxObzcb27du55557mDdvHhMnTqRhw4bcfffdEcd//fXXvP3221x//fW43W6ee+45+vTpw/z582nTps1/Ho+IVB8lz0VERERERETkoJSfn8/69ev53//+t0/xO2c1t2/fvsKYnfv2NKPc7/czZswYGjZsyFFHHbXHa55//vm88sorfPnll5x22mnh9rfffptGjRpx5JFHAqV121u3bs277767T2PZFykpKXz55ZcYhgGAaZo8/fTT5OXlkZCQwObNm3nkkUc49dRT+fTTT8Nxd9xxBw888EDEuR566CGys7P59ttvOfbYYwG48soradeuHSNGjOB///sfNpuNF154gcWLF/PGG29w0UUXAaVlVbp3786dd97J5ZdfTlxcXPi8f//9NytWrCAtLe2AjfuOO+4gFArx+++/k5KSEu7DBRdcwD333MNVV11FVFRUOD4YDPL111/jdDoB2Lx5M2+99RZ9+vTh888/B+Daa69lxYoVvPLKK7slzxctWsRPP/1Ep06dAOjfvz/Nmzfn7rvv5oMPPjhg4xKRqqeyLSIiIiIiIiJyUMrPzweISMbuSUFBwV7jd+7bee7yDB06lD///JNnnnkGh2PP8xJPPPFEUlNTI2Z7b9++na+++orzzz8/3JaYmMjff//Njz/+uE9j2ReDBw8OJ8QBjjvuOEKhEH/99RcA06dPx+/3c91110XElZ2ZDfD555/TuXPncOIcShflHDx4MGvWrAk/mPj888/JzMzkggsuCMc5nU6uv/56CgsL+frrryPOe/bZZx/QxLllWbz//vv069cPy7LYsmVLeOvduzd5eXn88ssvEcdceuml4cQ5wNFHH41lWVx++eURcUcffTTr1q0jGAxGtHft2jWcOAeoV68e//vf/5g2bRqhUOiAjU1Eqp6S5yIiIiIiIiJyUIqPjwd2JcX3ZmdifE/xe0uwP/roo7z44ov83//9H6eccsper+lwODj77LP5+OOPw/WyP/jgAwKBQETyfOTIkcTGxtK5c2eaNm3KkCFDmDNnzj6NqyL16tWLeJ2UlASUJu+BcBK9adOmEXFpaWnh2J3++usvmjdvvts1WrZsGXGuv/76i6ZNm2Kz2fYYt1PDhg33fUD7YPPmzeTm5vLCCy+QlpYWse2sPZ+TkxNxTNn7lJCQAEDdunV3azdNk7y8vIj2svcPoFmzZhQXF+9WY15EDi5KnouIiIiIiIjIQSk+Pp7atWuzaNGifYrfmcBduHBhhTE797Vq1Wq3fRMnTmTkyJFcffXV3Hnnnfvcz/79+1NQUMAXX3wBwDvvvEOLFi0iyse0bNmSpUuX8tZbb3Hsscfy/vvvc+yxxzJq1Kh9vk5Zdru93HbLsv71OQ+0f5ZPORBM0wTg4osv5quvvip369atW8QxFd2ng+H+iUjlUvJcRERERERERA5ap512GitXrmTu3Ll7je3bty92u53XX3+9wpjXXnsNh8NBnz59Ito//vhjrrjiCs466yyeffbZ/erj8ccfT61atXj77bfZsmULM2fOjJh1vlNMTAznn38+EyZMYO3atZx66qncf//9eL3e/brevqpfvz4Ay5cvj2jfvHlzeHb6P2OXLl262zmWLFkSca769euzfPnycBK7orjKkpaWRlxcHKFQiJ49e5a7paenH9Brlr1/AMuWLSM6OvqAlqQRkaqn5LmIiIiIiIiIHLRuueUWYmJiuOKKK8jOzt5t/8qVK3nqqaeA0jIcAwcOZPr06YwbN2632PHjxzNz5kwGDRpEVlZWuP2bb76hf//+HH/88UyaNGm3kiR7Y7PZOOecc/j00095/fXXCQaDuyXPt27dGvHa5XLRqlUrLMsiEAjs1/X2Vc+ePXE6nYwdOzZiNvWYMWN2iz3llFOYP39+xEOKoqIiXnjhBRo0aBCeqX/KKaewadOmiBrvwWCQsWPHEhsbS/fu3StlLDvZ7XbOPvts3n///XK/kVAZZVTmzp0bUUd93bp1fPzxx/Tq1avC2esicnDY86oWIiIiIiIiIiI1WOPGjZk8eTLnn38+LVu25NJLL6VNmzb4/X6+//573n33XQYMGBCOf/LJJ1myZAnXXnstU6dODc8wnzZtGh9//DHdu3fn8ccfD8f/9ddfnH766RiGwTnnnMO7774bcf127drRrl27vfbz/PPPZ+zYsYwaNYq2bduGS8js1KtXLzIzM+nWrRsZGRksXryYZ555hlNPPXWfF0TdX2lpadx00008+OCDnHbaaZxyyin8+uuvfPHFF6SmpkbE3nrrrbz55pv07duX66+/nuTkZF599VVWr17N+++/H36gMHjwYJ5//nkGDBjAzz//TIMGDXjvvfeYM2cOY8aMqbSx/NNDDz3ErFmzOProo7nyyitp1aoV27Zt45dffmH69Ols27btgF6vTZs29O7dm+uvvx63281zzz0HwOjRow/odUSk6il5LiIiIiIiIiIHtdNPP52FCxfy6KOP8vHHHzNu3Djcbjft2rXj8ccf58orrwzHxsbGMmPGDJ577jneeOMNbr75ZizLokWLFowZM4Zrr70Wp9MZjl+9enV4gcghQ4bsdu1Ro0btU/L8mGOOoW7duqxbt67cki1XXXUVkyZN4oknnqCwsJCsrCyuv/76/aqt/m/cd999eDwexo8fH044f/nll5x66qkRcRkZGXz//feMHDmSsWPH4vV6adeuHZ9++mlEbFRUFLNnz+bWW2/l1VdfJT8/n+bNmzNhwoSIhxiVKSMjg/nz53PvvffywQcf8Nxzz5GSkkLr1q15+OGHD/j1unfvTteuXRk9ejRr166lVatWTJw4cZ9+LkSkZjMsrXIgInJIWbRoEVdffTXfffddufu7dOnCSy+9tNeYN954A6/XWy1xTZo02YeRioiIiIiI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gADs2rUrXXvv3r2xYMGCvA+kIhYtWpStfsOGDcvlJJRfVapUCUuWLEn3f2nJkiWoVKmSSKnE17ZtW8XPgiBg5syZGDhwIIyNjcULRUREREREREQ5hiPPqcCwsrLCvHnz0KlTJ6X2Xbt2YdSoUXjx4oVIycRlY2OjdD0kJAQWFhZKixhKJBI8efIkr6NRPnH27Fm0bNkSpUqVgpubGwDA398fISEhOHz4MOrWrStyQtWgr6+P27dvw9bWVuwoRERERERERJQDOPKcCox+/fqhf//+ePLkCWrVqgUgbc7zWbNmwcfHR+R04nn69KnSdX19fZw9e5YFPsq2+vXr49GjR1i6dCkePnwIAGjfvj0GDx4MS0tLkdMREREREREREeUOjjynAkMQBCxYsABz585FaGgogLSFDkePHo1hw4Zla27iwoCjY4lyB19bRERERERERAULi+dUIH348AFAWjGLlLHAR98jKioKa9euRUBAAACgfPny6N27NwwNDUVOpjr42iIiIiIiIiIqWDhtCxU4b968QWBgIADAyckJxYsXFzkRUf527do1eHh4QEdHBzVq1AAAzJs3DzNmzMCxY8dQpUoVkROK48sFVFNSUrBhw4Z05xwuxktERERERESUP3HkORUYsbGxGDp0KDZt2gS5XA4AUFNTQ48ePbB48WLo6uqKnFAcMplM6XrJkiVx/vx5WFtbK7UbGBjkYSrKT+rWrQt7e3usXr1asdBsSkoK+vbtiydPnuDcuXMiJxTHl4vxZoSL8RIRERERERHlXyyeU4ExYMAAnDhxAkuWLEHt2rUBAOfPn8ewYcPQpEkTLF++XOSE4pBKpUrzvQuCkOH11NRUMeJRPqCjo4ObN2/CyclJqf3BgweoVq0a4uLiREpGRERERERERJR7OG0LFRh///03du/ejQYNGijaWrRoAR0dHXTu3LnQFs9Pnz4tdgTK5wwMDPDixYt0xfOQkBCuK/ANKlasiMOHD8PKykrsKERERERERESUDSyeU4ERFxcHMzOzdO2mpqaFemRs/fr1v6m/r68vBg4cCCMjo9wJRPnOzz//jD59+mDOnDmoVasWAODChQsYPXo0/ve//4mcLv949uwZkpOTxY5BRERERERERNnEaVuowGjcuDGKFSuGTZs2QVtbGwAQHx8PT09PREZG4sSJEyInzB8MDAxw69Yt2Nra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DA0NRU5GRERERERERN+LxXPK99q3b//VPhKJBH///XcepFF9b968QWBgIADAyckJxYsXFzkR5Ve3bt1CvXr1IJPJxI4iqmvXrsHDwwM6OjqoUaMGAODq1auIj4/HsWPHUKVKFZETEhEREREREdH34JznlO9xZGf2xMbGYujQodi0aRPkcjkAQE1NDT169MDixYuhq6srckJSVQcOHFC6LggCwsLCsGTJEtSuXVukVKpjxIgRaN26NVavXg119bRfqykpKejbty+8vb1x7tw5kRMSERERERER0ffgyHOiQmLAgAE4ceKEUsHz/PnzGDZsGJo0aYLly5eLnJBUlVQqVboukUhgYmKCRo0aYe7cubCwsBApmWrQ0dHBzZs34eTkpNT+4MEDVKtWDXFxcSIlIyIiIiIiIqIfwZHnRIXE33//jd27d6NBgwaKthYtWkBHRwedO3dm8Zwy9fGbCm/evAEAmJiYiBlH5RgYGODFixfpiuchISFcV4CIiIiIiIgoH5N+vQsRFQRxcXEwMzNL125qasqRsZSpqKgoeHl5oXjx4jA3N4e5uTmKFy+OIUOGICoqSux4KuHnn39Gnz59sHPnToSEhCAkJAQ7duxA37598b///U/seERERERERET0nThtC1Eh0bhxYxQrVgybNm2CtrY2ACA+Ph6enp6IjIzEiRMnRE5IqiYyMhJubm549eoVunbtirJlywJIm45k27ZtsLKywsWLF1G0aFGRk4orKSkJo0ePxooVK5CSkgIA0NDQwKBBg+Dr6wstLS2RExIRERERERHR92DxnKiQuHfvHjw8PJCYmIhKlSoBAG7fvg1tbW0cPXoU5cuXFzkhqRpvb2+cPHkSJ06cSPethfDwcDRt2hSNGzfG/PnzRUqoWuLi4hAcHAwAsLOz4yK8RERERERERPkci+dEhUhcXBy2bt2Khw8fAgDKli2Lrl27QkdHR+RkpIqsra2xcuVKeHh4ZLjdz88PAwcOxLNnz/I2GBERERERERFRHmDxnIiIMqSlpYXg4GCULFkyw+0vX76Evb09EhIS8jiZ+Nq3b5/tvnv27MnFJERERERERESUW9TFDkBEuefAgQPZ7tu6detcTEL5UfHixfHs2bNMi+dPnz6FsbFxHqdSDYaGhoqfBUHA3r17YWhoiGrVqgEArl+/jqioqG8qshMRERERERGRauHIc6ICTCqVKl2XSCT48iUvkUgAAKmpqXmWi/KH3r17Izg4GMePH4empqbStsTERHh4eMDW1hbr1q0TKaFqGDNmDCIjI7FixQqoqakBSHs9DR48GAYGBvjzzz9FTkhERERERERE34PFc6JC4sSJExgzZgz++OMPuLm5AQD8/f0xYcIE/PHHH2jSpInICUnVvHz5EtWqVYOWlha8vLzg5OQEQRAQEBCAZcuWITExEdeuXYOVlZXYUUVlYmKC8+fPo0yZMkrtgYGBqFWrFt69eydSMiIiIiIiIiL6EZy2haiQ8Pb2xooVK1CnTh1Fm4eHB3R1ddG/f38EBASImI5UUcmSJeHv74/Bgwdj3Lhxim8tSCQSNGnSBEuWLCn0hXMASElJwcOHD9MVzx8+fAi5XC5SKiIiIiIiIiL6USyeExUSwcHBMDIyStduaGiIZ8+e5Xkeyh9sbGxw5MgRvH//HkFBQQAAe3v7QjvXeUZ69eqFPn36IDg4GDVq1AAAXL58Gb6+vujVq5fI6YiIiIiIiIjoe3HaFqJCol69etDW1sbmzZthZmYGAIiIiECPHj2QkJCAs2fPipyQKH+Sy+WYM2cOFi5ciLCwMACAhYUFhg8fjpEjRyrmQSciIiIiIiKi/IXFc6JC4vHjx2jXrh0ePXqkmGojJCQEDg4O2LdvH+zt7UVOSJT/yWQyAICBgYHISYiIiIiIiIjoR7F4TlSICIKA48eP4+HDhwCAsmXLwt3dHRKJRORkRPlXo0aNsGfPnnTTIslkMrRt2xanTp0SJxgRERERERER/RAWz4mIiH6AVCpFeHg4TE1Nldpfv36NEiVKIDk5WaRkRERERERERPQjuGAoUSFy8uRJnDx5Eq9fv4ZcLlfatm7dOpFSEeVPd+7cUfz84MEDhIeHK66npqbCz88PJUqUECMaEREREREREeUAFs+JConff/8dU6dORbVq1WBhYcGpWoh+kIuLCyQSCSQSCRo1apRuu46ODhYvXixCMiIiIiIiIiLKCZy2haiQsLCwwOzZs9G9e3exoxAVCM+fP4cgCLC1tcWVK1dgYmKi2KapqQlTU1OoqamJmJCIiIiIiIiIfgRHnhMVEklJSahVq5bYMYgKjNKlSwNAuimQiIiIiIiIiKhg4MhzokJizJgxKFKkCCZOnCh2FKICZdOmTVlu79GjRx4lISIiIiIiIqKcxOI5USExfPhwbNq0Cc7OznB2doaGhobS9nnz5omUjCh/K1q0qNL15ORkxMXFQVNTE7q6uoiMjBQpGRERERERERH9CE7bQlRI3LlzBy4uLgCAe/fuiRuGqAB5//59uragoCAMGjQIo0ePFiEREREREREREeUEjjwnIiLKBdeuXUO3bt3w8OFDsaMQERERERER0XfgyHOiAq59+/Zf7SORSPD333/nQRqiwkNdXR2hoaFixyAiIiIiIiKi78TiOVEBZ2hoKHYEogLtwIEDStcFQUBYWBiWLFmC2rVri5SKiIiIiIiIiH4Up20hIiL6AVKpVOm6RCKBiYkJGjVqhLlz58LCwkKkZERERERERET0I1g8JyIiygFv3rwBAJiYmIichIiIiIiIiIhygvTrXYiIiCgjUVFR8PLyQvHixWFubg5zc3MUL14cQ4YMQVRUlNjxiIiIiIiIiOgHcOQ5ERHRd4iMjISbmxtevXqFrl27omzZsgCABw8eYNu2bbCyssLFixdRtGhRkZMSERERERER0fdg8ZyIiOg7eHt74+TJkzhx4gTMzMyUtoWHh6Np06Zo3Lgx5s+fL1JCIiIiIiIiIvoRLJ4TERF9B2tra6xcuRIeHh4Zbvfz88PAgQPx7NmzvA1GRERERERERDmCc54TERF9h7CwMJQvXz7T7RUqVEB4eHgeJiIiIiIiIiKinMTiORER0XcoXrx4lqPKnz59CmNj47wLREREREREREQ5isVzIiKi7+Dh4YHx48cjKSkp3bbExERMnDgRzZo1EyEZEREREREREeUEznlORET0HV6+fIlq1apBS0sLXl5ecHJygiAICAgIwLJly5CYmIhr167ByspK7KhERERERERE9B1YPCciIvpOT58+xeDBg3Hs2DF8/HUqkUjQpEkTLFmyBPb29iInJCIiIiIiIqLvxeI5ERHRD3r//j2CgoIAAPb29pzrnIiIiIiIiKgAYPGciIiIiIiIiIiIiOgLXDCUiIiIiIiIiIiIiOgLLJ4TEREREREREREREX2BxXMiIiIiIiIiIiIioi+weE5ERERERERERERE9AUWz4mIiIiIiIiIiIiIvsDiORERERERERERERHRF1g8JyIiIiIiIiIiIiL6AovnRERERERERERERERfYPGciIiIiIiIiIiIiOgLLJ4TEREREREREREREX2BxXMiIiIiIiIiIiIioi+weE5ERERERERERERE9AUWz4mIiIiIiIiIiIiIvsDiORERERERERERERHRF1g8JyIiygXBwcEYMGAAbG1toa2tDQMDA9SuXRsLFy5EfHy8Ut/k5GQsWrQI1atXh76+PooUKYLq1atj0aJFSE5OVuobFxeHpUuXomnTprCwsIC+vj4qV66M5cuXIzU1NS8PkYiIiIgKCb63JaLCSiIIgiB2CCIiovv376Ny5crQ1NTMcHtSUhJu3rz51T4BAQFISEgQpZ+dnR0A4NChQ+jUqRO0tLTQo0cPVKhQAUlJSTh//jz+/vtv9OzZE6tWrQIAxMbGomXLljh79ixatWqFZs2aQSqVws/PDwcOHED9+vVx6NAh6OnpAQDu3bsHZ2dnNG7cGE2bNoWBgQGOHj2KvXv3okePHti4cWPmDzIRERERqRRVfg/M97ZERAAEIiIiFXD37l2hdu3amW53dXXNVp+goCDR+gmCIDx58kQoUqSI4OTkJISGhqbrGxQUJCxYsEBxvX///gIAYfHixen6LlmyRAAgDBw4UNH25s0b4d69e+n69urVSwCgyEFEREREqk+V3wMLAt/bEhFx2hYiIqIcNHv2bMTExGDt2rWwsLBIt93e3h7Dhw8HALx8+RJr165Fo0aNMGTIkHR9vby80LBhQ6xZswYvX74EABQvXhzly5dP17ddu3YAgICAgJw8HCIiIiIqxPjelogKOxbPiYiIctA///wDW1tb1KpV66t9jxw5gtTUVPTo0SPTPj169EBKSgr8/PyyvK3w8HAAaX+AEBERERHlBL63JaLCjsVzIiKiHCKTyfDq1StUrFgxW/0fPHgAAKhUqVKmfT5uy2rUTVJSEhYsWAAbGxtUr179GxITEREREWWM722JiAB1sQMQEREVFDKZDACgr6+frf4fPnz4av+P2z7edkaGDBmCBw8e4NChQ1BX5692IiIiIvpxfG9LRMSR50RERDnGwMAAwKc/HL7m4x8PWfX/2h8hf/75J1avXo1p06ahRYsW3xKXiIiIiChTfG9LRMTiORERUY4xMDCApaUl7t27l63+ZcuWBQDcuXMn0z4ft5UrVy7dtg0bNmDMmDEYOHAgJkyY8B2JiYiIiIgyxve2REQsnhMREeWoVq1aITg4GP7+/l/t27x5c6ipqWHz5s2Z9tm0aRPU1dXRrFkzpfb9+/ejb9++aN++PZYuXfrDuYmIiIiIvsT3tkRU2LF4TkRElIN+/fVX6OnpoW/fvoiIiEi3PTg4GAsXLgQAWFlZoVevXjhx4gSWL1+eru+KFStw6tQp9OnTByVLllS0nzt3Dl26dEG9evWwdetWSKX8dU5EREREOY/vbYmosOPKC0RERDnIzs4O27Ztw88//4yyZcuiR48eqFChApKSknDx4kX89ddf6Nmzp6L//Pnz8fDhQwwePBh+fn6KUThHjx7F/v37Ub9+fcydO1fR//nz52jdujUkEgk6duyIv/76S+n+nZ2d4ezsnCfHSkREREQFG9/bElFhx+I5ERFRDmvdujXu3LmDP//8E/v378fy5cuhpaUFZ2dnzJ07F/369VP0LVKkCE6ePIlly5Zhy5YtGD16NARBgJOTExYsWIDBgwdDQ0ND0f/p06eIjo4GAHh5eaW778mTJ/MPDCIiIiLKMXxvS0SFGYvnREREucDBwQGrVq3KVl9NTU14e3vD29v7q30bNGgAQRB+MB0RERERUfbxvS0RFVacSIqIiIiIiIiIiIiI6AsceU5ERCrj0qVLMDIyynBbTExMtvuI2Y+IiIiI6Fuo8ntgIqLCTiLw+zFEREREREREREREREo4bQsRERERERERERER0RdYPCciIiIiIiIiIiIi+gLnPKcfJpfLERoaCn19fUgkErHjEBEREdF3EgQBHz58gKWlJaRSjrP5HN/zEhERERUM3/Kel8Vz+mGhoaGwsrISOwYRERER5ZCQkBCULFlS7Bgqhe95iYiIiAqW7LznZfGcfpi+vj6AtP9wBgYGIqchIiIiou8lk8lgZWWleH9Hn/A9LxEREVHB8C3veVk8px/28WurBgYG/EOCiIiIqADgtCTp8T0vERERUcGSnfe8nMiQiIiIiIiIiIiIiOgLLJ4TEREREREREREREX2BxXMiIiIiIiIiIiIioi+weE5ERERERCrL2toaEokk3cXLywsAkJCQAC8vLxQrVgxFihRBhw4dEBERoXQbL168QMuWLaGrqwtTU1OMHj0aKSkpYhwOEREREeUjLJ4TEREREZHKunr1KsLCwhSX48ePAwA6deoEABgxYgT++ecf/PXXXzh79ixCQ0PRvn17xf6pqalo2bIlkpKScPHiRWzcuBEbNmzApEmTRDkeIiIiIso/JIIgCGKHoPxNJpPB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/HLXNrvdrtWrV+uNN97QokWLVFJSopycnHKTRmw2m6xWqyTJarVq/fr15R7XZrO59p0PY14AAADQPDfAzJkz3f6Y+/bt09KlS8vN3LFarRVyIgEAqHpK7Q79L/3UhUIHduJCoahcnmYP3dElRje0i9Try3Zp1rq9WplxRGt2rdYdXWL0QFIzBftxQcbaxJ3j3Z49e2rz5s3ltg0fPlyxsbF69NFHFRUVJYvFomXLlrka9hkZGcrMzFRiYqIkKTExUc8//7yys7MVFnbqryKWLFmiwMBAxcXFuS0rAAAAahaa5wbKzs5WRkaGJKlFixaugfwfMXPmTIWFhalPnz6ubfHx8ZxIAEAtsWx7to4WFKuev7d6tmS5DBgjyNeiCX3j9JeEaL3w1XYt3Z6tWev26tPvDmrctc31l87R8jRzyZ3axB3j3YCAALVu3brctjp16ig0NNS1/e6779a4ceMUEhKiwMBAjR07VomJierSpYskqVevXoqLi9OQIUM0efJkZWVlacKECRo9ejSzywEAAHBBnL0YIC8vT0OGDFGDBg101VVX6aqrrlKDBg10xx13KDc395Ifz+FwaObMmRo2bJg8PX/5fUhQUJDrRGLFihVKT0/X8OHDL3gi8f3332vRokWcSABANTRvQ6Yk6db4hrLQnITBmtT313+GddK7d3VWszB/5RSW6snPtqr3q99o9c4jRsdDJXD3ePf3vPzyy+rbt6/69++v7t27y2q1lvuLTLPZrAULFshsNisxMVF33HGHhg4dqokTJ7o9CwAAAGoOzq4NMGLECKWlpWnBggXKyclRTk6OFixYoI0bN+qee+655MdbunSpMjMzddddd52zjxMJAKj5Duac1KrTDcmBXCgUVUj35vX19d+u1MSbWinYz6Jd2QUa+s563T1rg348UmB0PFQgd493z7Zy5Uq98sorrp99fHw0depUHT9+XCdOnNDHH398zhKEMTEx+uqrr1RYWKgjR47opZdeKjfxBAAAADgbo0UDLFiwQIsWLVK3bt1c25KTk/X222/ruuuuu+TH69Wrl5xO53n3nTmRmDp16gXvf+ZEAgBQPX24Yb+cTimxSaga1atjdBygHE+zh4YmNtKN7SL16rJd+m/KPi3bka2VO4/o9o4NdX/PZooI4gK3NY27x7sAAACAEZh5boDQ0FAFBQWdsz0oKEh169Y1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AAAAVRkzzwEAAADUeOPGjdOwYcPUsWNHde7cWa+88opOnDih4cOHGx0NAAAAVRTNc1RL3t7eeuqpp875U1rUXLzntQvvd+3C+1378J7DCAMGDNCRI0f05JNPKisrS+3bt9fChQvPuYgoyuPz6l7U0/2oqXtRT/einu5FPd2Lel4ck9PpdBodAgAAAAAAAACAqoQ1zwEAAAAAAAAAOAvNcwAAAAAAAAAAzkLzHAAAAAAAAACAs9A8BwAAAAAAAADgLDTPAQAAAAC/y+l0Gh2hRqGe7kU93Yt6uh81dS/q6V7U88JonqNamjp1qho1aiQfHx8lJCRo/fr1RkdCBXj66adlMpnK3WJjY42OBTdavXq1brjhBkVGRspkMunTTz8tt9/pdOrJJ59URESEfH19lZSUpF27dhkTFn/a773fd9555zmf+euuu86YsPjTJk2apE6dOikgIEBhYWG6+eablZGRUe6YoqIijR49WqGhofL391f//v1ls9kMSgzgQnJyciRJJpOJk2s3oJ7uRT3di3q6HzV1L+rpXtTz99E8R7XzwQcfaNy4cXrqqaf07bffql27dkpOTlZ2drbR0VABWrVqpcOHD7tua9asMToS3OjEiRNq166dpk6det79kydP1muvvabp06crLS1NderUUXJysoqKiio5Kdzh995vSbruuuvKfebff//9SkwId1q1apVGjx6t1NRULVmyRKWlperVq5dOnDjhOubBBx/UF198ofnz52vVqlU6dOiQ+vXrZ2BqAGc7cOCALrvsMt11112SOLn+s6ine1FP96Ke7kdN3Yt6uhf1vDg0z1HtTJkyRSNGjNDw4cMVFxen6dOny8/PT++8847R0VABPD09ZbVaXbd69eoZHQlu1Lt3bz333HO65ZZbztnndDr1yiuvaMKECbrpppvUtm1bvfvuuzp06NA5M5ZRPfzW+32Gt7d3uc983bp1KzEh3GnhwoW688471apVK7Vr106zZs1SZmam0tPTJUm5ubmaMWOGpkyZoh49eig+Pl4zZ87UunXrlJqaanB6ANKpk+rbb79da9euVWRkpEaNGiWJk+s/inq6F/V0L+rpftTUvaine1HPi0fzHNVKSUmJ0tPTlZSU5Nrm4eGhpKQkpaSkGJgMFWXXrl2KjIxUkyZNNHjwYGVmZhodCZVkz549ysrKKvd5DwoKUkJCAp/3GmzlypUKCwtTixYtNGrUKB07dszoSHCT3NxcSVJISIgkKT09XaWlpeU+47GxsYqOjuYzDlQBBw4cUP/+/fXGG28oNjZWzz33nCwWCyfXfxD1dC/q6V7U0/2oqXtRT/einpeG5jmqlaNHj8putys8PLzc9vDwcGVlZRmUChUlISFBs2bN0sKFCzVt2jTt2bNHV155pfLz842Ohkpw5jPN5732uO666/Tuu+9q2bJl+sc//qFVq1apd+/estvtRkfDn+RwOPTAAw+oa9euat26taRTn3EvLy8FBweXO5bPOGC8gwcP6tZbb9X06dN1+eWXq6SkRJL02muvcXL9B1BP96Ke7kU93Y+auhf1dC/qeelongOosnr37q3bbrtNbdu2VXJysr766ivl5OToww8/NDoagAowcOBA3XjjjWrTpo1uvvlmLViwQBs2bNDKlSuNjoY/afTo0dqyZYvmzZtndBQAvyM3N1c33XSTRo8erQ4dOqisrEwWi0UOh0MSJ9eXinq6F/V0L+rpftTUvaine1HPP4bmOaqVevXqyWw2y2azldtus9lktVoNSoXKEhwcrObNm2v37t1GR0ElOPOZ5vNeezVp0kT16tXjM1/NjRkzRgsWLNCKFSvUsGFD13ar1aqSkhLl5OSUO57POGCcAwcO6N5775WXl5fefPNNpaamytPTU9KppRI5ub401NO9qKd7UU/3o6buRT3di3r+cTTPUa14eXkpPj5ey5Ytc21zOBxatmyZEhMTDUyGylBQUKAff/xRERERRkdBJWjcuLGsVmu5z3teXp7S0tL4vNcSBw4c0LFjx/jMV1NOp1NjxozRJ598ouXLl6tx48bl9sfHx8tisZT7jGdkZCgzM5PPOGCAAwcO6Oabb9bIkSM1cuRI2e12PfDAA1q/fr3rxJmT64tHPd2LeroX9XQ/aupe1NO9qOef5ASqmXnz5jm9vb2ds2bNcm7bts05cuRIZ3BwsDMrK8voaHCz//u//3OuXLnSuWfPHufatWudSUlJznr16jmzs7ONjgY3yc/Pd27atMm5adMmpyTnlClTnJs2bXLu27fP6XQ6nS+++KIzODjY+dlnnzl/+OEH50033eRs3Lix8+TJkwYnxx/xW+93fn6+86GHHnKmpKQ49+zZ41y6dKnz8ssvdzZr1sxZVFRkdHT8AaNGjXIGBQU5V65c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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# === 調試並修正特徵重複問題 ===\n",
        "\n",
        "def debug_data_quality(df, feature_columns, target_column):\n",
        "    \"\"\"調試數據品質問題\"\"\"\n",
        "    print(\"=== 數據品質調試 ===\")\n",
        "\n",
        "    # 1. 檢查特徵重複\n",
        "    print(f\"特徵欄位數量: {len(feature_columns)}\")\n",
        "    print(f\"唯一特徵數量: {len(set(feature_columns))}\")\n",
        "\n",
        "    if len(feature_columns) != len(set(feature_columns)):\n",
        "        print(\"⚠️ 發現重複特徵:\")\n",
        "        from collections import Counter\n",
        "        feature_counts = Counter(feature_columns)\n",
        "        for feature, count in feature_counts.items():\n",
        "            if count > 1:\n",
        "                print(f\"  {feature}: 出現 {count} 次\")\n",
        "\n",
        "    # 2. 檢查目標變數是否在特徵中\n",
        "    if target_column in feature_columns:\n",
        "        print(f\"⚠️ 目標變數 '{target_column}' 包含在特徵中！這會導致數據洩漏\")\n",
        "\n",
        "    # 3. 檢查方差為零的特徵\n",
        "    zero_var_features = []\n",
        "    for col in feature_columns:\n",
        "        if col in df.columns and df[col].dtype in ['int64', 'float64']:\n",
        "            if df[col].var() == 0:\n",
        "                zero_var_features.append(col)\n",
        "\n",
        "    if zero_var_features:\n",
        "        print(f\"⚠️ 方差為零的特徵: {zero_var_features}\")\n",
        "        print(\"這些特徵對模型沒有幫助，建議移除\")\n",
        "\n",
        "    # 4. 檢查無窮值和極大值\n",
        "    problematic_cols = []\n",
        "    for col in feature_columns:\n",
        "        if col in df.columns and df[col].dtype in ['int64', 'float64']:\n",
        "            inf_count = np.isinf(df[col]).sum()\n",
        "            large_count = (np.abs(df[col]) > 1e10).sum()\n",
        "            if inf_count > 0 or large_count > 0:\n",
        "                problematic_cols.append(f\"{col}: {inf_count} 無窮值, {large_count} 極大值\")\n",
        "\n",
        "    if problematic_cols:\n",
        "        print(\"⚠️ 數據問題:\")\n",
        "        for problem in problematic_cols:\n",
        "            print(f\"  {problem}\")\n",
        "\n",
        "    return zero_var_features, problematic_cols\n",
        "\n",
        "def clean_feature_list(feature_columns, target_column, zero_var_features=None):\n",
        "    \"\"\"清理特徵列表\"\"\"\n",
        "    print(\"=== 清理特徵列表 ===\")\n",
        "\n",
        "    # 1. 移除重複\n",
        "    cleaned_features = list(dict.fromkeys(feature_columns))  # 保持順序的去重\n",
        "    removed_duplicates = len(feature_columns) - len(cleaned_features)\n",
        "    if removed_duplicates > 0:\n",
        "        print(f\"移除 {removed_duplicates} 個重複特徵\")\n",
        "\n",
        "    # 2. 移除目標變數（如果在特徵中）\n",
        "    if target_column in cleaned_features:\n",
        "        cleaned_features.remove(target_column)\n",
        "        print(f\"移除目標變數 '{target_column}' 從特徵列表\")\n",
        "\n",
        "    # 3. 移除方差為零的特徵\n",
        "    if zero_var_features:\n",
        "        for feature in zero_var_features:\n",
        "            if feature in cleaned_features:\n",
        "                cleaned_features.remove(feature)\n",
        "                print(f\"移除方差為零的特徵: {feature}\")\n",
        "\n",
        "    print(f\"清理前特徵數: {len(feature_columns)}\")\n",
        "    print(f\"清理後特徵數: {len(cleaned_features)}\")\n",
        "\n",
        "    return cleaned_features\n",
        "\n",
        "def create_lstm_sequences_fixed(df, feature_columns, target_column, sequence_length=12, prediction_horizon=3):\n",
        "    \"\"\"修正版的LSTM序列創建函數\"\"\"\n",
        "    print(f\"創建LSTM序列數據...\")\n",
        "    print(f\"序列長度: {sequence_length} (60分鐘)\")\n",
        "    print(f\"預測距離: {prediction_horizon} (15分鐘)\")\n",
        "\n",
        "    # 檢查目標變數是否存在\n",
        "    if target_column not in df.columns:\n",
        "        print(f\"❌ 錯誤：目標變數 '{target_column}' 不存在於數據中\")\n",
        "        return None, None, None, None\n",
        "\n",
        "    # 調試數據品質\n",
        "    zero_var_features, problematic_cols = debug_data_quality(df, feature_columns, target_column)\n",
        "\n",
        "    # 清理特徵列表\n",
        "    cleaned_features = clean_feature_list(feature_columns, target_column, zero_var_features)\n",
        "\n",
        "    # 確保特徵欄位都存在\n",
        "    available_features = [col for col in cleaned_features if col in df.columns]\n",
        "    missing_features = [col for col in cleaned_features if col not in df.columns]\n",
        "\n",
        "    if missing_features:\n",
        "        print(f\"⚠️ 缺少特徵: {missing_features}\")\n",
        "\n",
        "    print(f\"最終使用特徵數量: {len(available_features)}\")\n",
        "    print(f\"最終使用特徵: {available_features}\")\n",
        "\n",
        "    # 選擇特徵數據（不包含目標變數）\n",
        "    feature_data = df[available_features].copy()\n",
        "    target_data = df[target_column].copy()\n",
        "\n",
        "    # 移除非數值特徵\n",
        "    numeric_features = feature_data.select_dtypes(include=[np.number])\n",
        "    print(f\"數值型特徵: {list(numeric_features.columns)}\")\n",
        "\n",
        "    # 檢查目標變數\n",
        "    if target_data.dtype not in ['int64', 'float64']:\n",
        "        print(f\"❌ 錯誤：目標變數 '{target_column}' 不是數值型\")\n",
        "        return None, None, None, None\n",
        "\n",
        "    # 合併特徵和目標變數（目標變數在最後）\n",
        "    all_data = pd.concat([numeric_features, target_data], axis=1)\n",
        "    final_columns = list(numeric_features.columns) + [target_column]\n",
        "    all_data.columns = final_columns\n",
        "\n",
        "    print(f\"合併後數據形狀: {all_data.shape}\")\n",
        "    print(f\"最終欄位順序: {list(all_data.columns)}\")\n",
        "    print(f\"目標變數 '{target_column}' 位於索引 {len(all_data.columns)-1}\")\n",
        "\n",
        "    # === 強化數據清理 ===\n",
        "    print(\"開始數據清理...\")\n",
        "\n",
        "    # 1. 檢查和處理無窮值\n",
        "    inf_summary = {}\n",
        "    for col in all_data.columns:\n",
        "        inf_count = np.isinf(all_data[col]).sum()\n",
        "        if inf_count > 0:\n",
        "            inf_summary[col] = inf_count\n",
        "            print(f\"  {col}: {inf_count} 個無窮值\")\n",
        "            # 將無窮值替換為NaN\n",
        "            all_data[col] = all_data[col].replace([np.inf, -np.inf], np.nan)\n",
        "\n",
        "    # 2. 檢查和處理過大的數值\n",
        "    large_value_threshold = 1e8  # 降低閾值到1e8\n",
        "    large_summary = {}\n",
        "    for col in all_data.columns:\n",
        "        large_mask = np.abs(all_data[col]) > large_value_threshold\n",
        "        large_count = large_mask.sum()\n",
        "        if large_count > 0:\n",
        "            large_summary[col] = large_count\n",
        "            print(f\"  {col}: {large_count} 個過大值 (>{large_value_threshold})\")\n",
        "            # 將過大值替換為該欄位的99%分位數\n",
        "            p99 = all_data[col].quantile(0.99)\n",
        "            p01 = all_data[col].quantile(0.01)\n",
        "            all_data.loc[all_data[col] > p99, col] = p99\n",
        "            all_data.loc[all_data[col] < p01, col] = p01\n",
        "\n",
        "    # 3. 處理缺失值\n",
        "    missing_summary = all_data.isnull().sum()\n",
        "    total_missing = missing_summary.sum()\n",
        "    print(f\"清理後缺失值: {total_missing} 個\")\n",
        "\n",
        "    if total_missing > 0:\n",
        "        print(\"填補缺失值...\")\n",
        "        for col in all_data.columns:\n",
        "            if all_data[col].isnull().sum() > 0:\n",
        "                if col == target_column:\n",
        "                    # 目標變數用線性插值\n",
        "                    all_data[col] = all_data[col].interpolate(method='linear')\n",
        "                    all_data[col] = all_data[col].fillna(method='bfill').fillna(method='ffill')\n",
        "                else:\n",
        "                    # 特徵用中位數填補\n",
        "                    median_val = all_data[col].median()\n",
        "                    if pd.isna(median_val):\n",
        "                        median_val = 0\n",
        "                    all_data[col] = all_data[col].fillna(median_val)\n",
        "\n",
        "    # 4. 最終品質檢查\n",
        "    final_missing = all_data.isnull().sum().sum()\n",
        "    final_inf = np.isinf(all_data.values).sum()\n",
        "\n",
        "    print(f\"最終數據品質:\")\n",
        "    print(f\"  缺失值: {final_missing}\")\n",
        "    print(f\"  無窮值: {final_inf}\")\n",
        "\n",
        "    if final_missing > 0 or final_inf > 0:\n",
        "        print(\"❌ 數據清理失敗\")\n",
        "        return None, None, None, None\n",
        "\n",
        "    # 檢查數據範圍\n",
        "    print(\"數據範圍檢查:\")\n",
        "    for col in all_data.columns:\n",
        "        col_min = all_data[col].min()\n",
        "        col_max = all_data[col].max()\n",
        "        col_std = all_data[col].std()\n",
        "        print(f\"  {col}: [{col_min:.3f}, {col_max:.3f}], std={col_std:.3f}\")\n",
        "\n",
        "    # 標準化\n",
        "    try:\n",
        "        scaler = MinMaxScaler()\n",
        "        data_scaled = scaler.fit_transform(all_data)\n",
        "        print(f\"✅ 標準化成功\")\n",
        "        print(f\"標準化後範圍: [{data_scaled.min():.6f}, {data_scaled.max():.6f}]\")\n",
        "    except Exception as e:\n",
        "        print(f\"❌ 標準化失敗: {e}\")\n",
        "        print(\"檢查是否還有異常值...\")\n",
        "\n",
        "        # 詳細檢查每一欄\n",
        "        for i, col in enumerate(all_data.columns):\n",
        "            col_data = all_data.iloc[:, i]\n",
        "            if np.any(np.isinf(col_data)) or np.any(np.isnan(col_data)):\n",
        "                print(f\"  {col}: 仍有異常值\")\n",
        "            elif np.any(np.abs(col_data) > 1e6):\n",
        "                print(f\"  {col}: 有極大值 {col_data.max()}\")\n",
        "\n",
        "        return None, None, None, None\n",
        "\n",
        "    # 創建序列\n",
        "    X, y = [], []\n",
        "    for i in range(sequence_length, len(data_scaled) - prediction_horizon + 1):\n",
        "        X.append(data_scaled[i-sequence_length:i])  # 過去sequence_length個時間點\n",
        "        y.append(data_scaled[i+prediction_horizon-1, -1])  # 未來prediction_horizon時間點的CO2（最後一欄）\n",
        "\n",
        "    X, y = np.array(X), np.array(y)\n",
        "    print(f\"✅ 序列數據創建成功: X{X.shape}, y{y.shape}\")\n",
        "\n",
        "    if len(X) == 0:\n",
        "        print(\"❌ 錯誤：無法創建序列數據\")\n",
        "        return None, None, None, None\n",
        "\n",
        "    return X, y, scaler, list(all_data.columns)\n",
        "\n",
        "# === 執行修正版本 ===\n",
        "\n",
        "print(\"=== 使用修正版函數重新創建序列數據 ===\")\n",
        "\n",
        "X, y, scaler, final_features = create_lstm_sequences_fixed(\n",
        "    df, feature_columns, target_column, sequence_length, prediction_horizon\n",
        ")\n",
        "\n",
        "# 檢查結果\n",
        "if X is not None:\n",
        "    print(\"\\n✅ 序列數據創建成功！\")\n",
        "    print(f\"特徵數量: {X.shape[2]}\")\n",
        "    print(f\"序列長度: {X.shape[1]}\")\n",
        "    print(f\"樣本數量: {X.shape[0]}\")\n",
        "    print(f\"目標變數範圍: {y.min():.6f} ~ {y.max():.6f}\")\n",
        "    print(f\"最終特徵列表: {final_features}\")\n",
        "else:\n",
        "    print(\"\\n❌ 序列數據創建失敗\")\n",
        "\n",
        "    # 如果失敗，嘗試最簡化版本\n",
        "    print(\"\\n嘗試最簡化版本...\")\n",
        "    basic_features = ['Indoor_Temp', 'Indoor_Humidity', 'Hour']\n",
        "    basic_available = [col for col in basic_features if col in df.columns]\n",
        "\n",
        "    if len(basic_available) > 0:\n",
        "        print(f\"使用基礎特徵: {basic_available}\")\n",
        "        X, y, scaler, final_features = create_lstm_sequences_fixed(\n",
        "            df, basic_available, target_column, sequence_length, prediction_horizon\n",
        "        )\n",
        "\n",
        "        if X is not None:\n",
        "            print(\"✅ 基礎版本成功！\")\n",
        "        else:\n",
        "            print(\"❌ 連基礎版本都失敗了，請檢查原始數據\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "id": "VIUuu-VDf8zE",
        "outputId": "05f5ab67-3dae-4dc5-bcc1-83077e2ce8f0"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "=== 使用修正版函數重新創建序列數據 ===\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'sequence_length' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-1528970812.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    232\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    233\u001b[0m X, y, scaler, final_features = create_lstm_sequences_fixed(\n\u001b[0;32m--> 234\u001b[0;31m     \u001b[0mdf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeature_columns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_column\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msequence_length\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprediction_horizon\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    235\u001b[0m )\n\u001b[1;32m    236\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'sequence_length' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 原本的 split_data 函數替換成：\n",
        "def split_data(X, y, train_ratio=0.7, val_ratio=0.15, test_ratio=0.15):\n",
        "    \"\"\"分割數據集為訓練/驗證/測試\"\"\"\n",
        "    # 時間序列數據不隨機打亂\n",
        "    total_samples = len(X)\n",
        "    train_end = int(total_samples * train_ratio)\n",
        "    val_end = int(total_samples * (train_ratio + val_ratio))\n",
        "\n",
        "    X_train = X[:train_end]\n",
        "    X_val = X[train_end:val_end]\n",
        "    X_test = X[val_end:]\n",
        "\n",
        "    y_train = y[:train_end]\n",
        "    y_val = y[train_end:val_end]\n",
        "    y_test = y[val_end:]\n",
        "\n",
        "    print(f\"訓練集: {X_train.shape[0]} 筆 ({X_train.shape[0]/total_samples*100:.1f}%)\")\n",
        "    print(f\"驗證集: {X_val.shape[0]} 筆 ({X_val.shape[0]/total_samples*100:.1f}%)\")\n",
        "    print(f\"測試集: {X_test.shape[0]} 筆 ({X_test.shape[0]/total_samples*100:.1f}%)\")\n",
        "\n",
        "    return X_train, X_val, X_test, y_train, y_val, y_test\n",
        "\n",
        "# 修改調用：\n",
        "X_train, X_val, X_test, y_train, y_val, y_test = split_data(X, y)"
      ],
      "metadata": {
        "id": "enqhT0b6f-5l"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def build_lstm_model(input_shape):\n",
        "    \"\"\"建立LSTM模型\"\"\"\n",
        "    model = Sequential([\n",
        "        # 第一層LSTM\n",
        "        LSTM(64, return_sequences=True, input_shape=input_shape),\n",
        "        Dropout(0.2),\n",
        "        BatchNormalization(),\n",
        "\n",
        "        # 第二層LSTM\n",
        "        LSTM(32, return_sequences=False),\n",
        "        Dropout(0.2),\n",
        "        BatchNormalization(),\n",
        "\n",
        "        # 全連接層\n",
        "        Dense(16, activation='relu'),\n",
        "        Dropout(0.1),\n",
        "        Dense(1)  # 輸出CO2預測值\n",
        "    ])\n",
        "\n",
        "    # 編譯模型\n",
        "    model.compile(\n",
        "        optimizer=Adam(learning_rate=0.001),\n",
        "        loss='mse',\n",
        "        metrics=['mae']\n",
        "    )\n",
        "\n",
        "    print(\"模型架構:\")\n",
        "    model.summary()\n",
        "\n",
        "    return model\n",
        "\n",
        "# 建立模型\n",
        "model = build_lstm_model((sequence_length, X.shape[2]))\n"
      ],
      "metadata": {
        "id": "BgjmA8GsgBXE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 原本的 train_model 函數替換成：\n",
        "from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint\n",
        "def train_model(model, X_train, y_train, X_val, y_val):\n",
        "    \"\"\"訓練LSTM模型\"\"\"\n",
        "    print(\"開始訓練模型...\")\n",
        "\n",
        "    # 設定回調函數\n",
        "    callbacks = [\n",
        "        EarlyStopping(monitor='val_loss', patience=15, restore_best_weights=True),\n",
        "        ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=7, min_lr=0.0001),\n",
        "        ModelCheckpoint('best_model.h5', monitor='val_loss', save_best_only=True, verbose=1)\n",
        "    ]\n",
        "\n",
        "    # 訓練模型\n",
        "    history = model.fit(\n",
        "        X_train, y_train,\n",
        "        batch_size=32,\n",
        "        epochs=100,\n",
        "        validation_data=(X_val, y_val),  # 改用驗證集\n",
        "        callbacks=callbacks,\n",
        "        verbose=1\n",
        "    )\n",
        "\n",
        "    return history\n",
        "\n",
        "# 修改調用：\n",
        "history = train_model(model, X_train, y_train, X_val, y_val)"
      ],
      "metadata": {
        "id": "CrRsZQ3LgB8A"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 原本的 evaluate_model 函數替換成：\n",
        "def evaluate_model(model, X_train, y_train, X_val, y_val, X_test, y_test, scaler, final_features):\n",
        "    \"\"\"評估所有數據集性能\"\"\"\n",
        "    print(\"評估模型性能...\")\n",
        "\n",
        "    results = {}\n",
        "\n",
        "    # 評估三個數據集\n",
        "    for name, X_data, y_data in [(\"訓練\", X_train, y_train), (\"驗證\", X_val, y_val), (\"測試\", X_test, y_test)]:\n",
        "        # 預測\n",
        "        y_pred_scaled = model.predict(X_data, verbose=0)\n",
        "\n",
        "        # 反標準化\n",
        "        dummy_data = np.zeros((len(y_data), len(final_features)))\n",
        "        dummy_data[:, -1] = y_data\n",
        "        y_true_original = scaler.inverse_transform(dummy_data)[:, -1]\n",
        "\n",
        "        dummy_data[:, -1] = y_pred_scaled.flatten()\n",
        "        y_pred_original = scaler.inverse_transform(dummy_data)[:, -1]\n",
        "\n",
        "        # 計算指標\n",
        "        mae = mean_absolute_error(y_true_original, y_pred_original)\n",
        "        rmse = np.sqrt(mean_squared_error(y_true_original, y_pred_original))\n",
        "        r2 = r2_score(y_true_original, y_pred_original)\n",
        "        mape = np.mean(np.abs((y_true_original - y_pred_original) / y_true_original)) * 100\n",
        "\n",
        "        results[name] = {\n",
        "            'mae': mae, 'rmse': rmse, 'r2': r2, 'mape': mape,\n",
        "            'y_true': y_true_original, 'y_pred': y_pred_original\n",
        "        }\n",
        "\n",
        "        print(f\"{name}集:\")\n",
        "        print(f\"  MAE: {mae:.2f} ppm\")\n",
        "        print(f\"  RMSE: {rmse:.2f} ppm\")\n",
        "        print(f\"  R²: {r2:.3f}\")\n",
        "        print(f\"  MAPE: {mape:.2f}%\")\n",
        "        print()\n",
        "\n",
        "    return results\n",
        "\n",
        "# 修改調用：\n",
        "results = evaluate_model(model, X_train, y_train, X_val, y_val, X_test, y_test, scaler, final_features)"
      ],
      "metadata": {
        "id": "PMhtcLiGgEF9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 原本的 visualize_results 函數替換成：\n",
        "def visualize_results(history, results):\n",
        "    \"\"\"視覺化訓練結果\"\"\"\n",
        "    fig, axes = plt.subplots(2, 3, figsize=(18, 12))\n",
        "\n",
        "    # 1. 訓練歷史 - Loss\n",
        "    axes[0, 0].plot(history.history['loss'], label='訓練Loss')\n",
        "    axes[0, 0].plot(history.history['val_loss'], label='驗證Loss')\n",
        "    axes[0, 0].set_title('模型訓練歷史')\n",
        "    axes[0, 0].set_xlabel('Epoch')\n",
        "    axes[0, 0].set_ylabel('Loss')\n",
        "    axes[0, 0].legend()\n",
        "    axes[0, 0].grid(True, alpha=0.3)\n",
        "\n",
        "    # 2. MAE歷史\n",
        "    axes[0, 1].plot(history.history['mae'], label='訓練MAE')\n",
        "    axes[0, 1].plot(history.history['val_mae'], label='驗證MAE')\n",
        "    axes[0, 1].set_title('平均絕對誤差歷史')\n",
        "    axes[0, 1].set_xlabel('Epoch')\n",
        "    axes[0, 1].set_ylabel('MAE')\n",
        "    axes[0, 1].legend()\n",
        "    axes[0, 1].grid(True, alpha=0.3)\n",
        "\n",
        "    # 3. 模型指標比較\n",
        "    datasets = list(results.keys())\n",
        "    maes = [results[name]['mae'] for name in datasets]\n",
        "    colors = ['blue', 'green', 'red']\n",
        "\n",
        "    axes[0, 2].bar(datasets, maes, color=colors[:len(datasets)], alpha=0.7)\n",
        "    axes[0, 2].set_title('MAE 比較')\n",
        "    axes[0, 2].set_ylabel('MAE (ppm)')\n",
        "\n",
        "    # 4. R² 比較\n",
        "    r2s = [results[name]['r2'] for name in datasets]\n",
        "    axes[1, 0].bar(datasets, r2s, color=colors[:len(datasets)], alpha=0.7)\n",
        "    axes[1, 0].set_title('R² 比較')\n",
        "    axes[1, 0].set_ylabel('R²')\n",
        "\n",
        "    # 5. 測試集預測 vs 實際\n",
        "    test_results = results['測試']\n",
        "    axes[1, 1].scatter(test_results['y_true'], test_results['y_pred'], alpha=0.6)\n",
        "    axes[1, 1].plot([test_results['y_true'].min(), test_results['y_true'].max()],\n",
        "                   [test_results['y_true'].min(), test_results['y_true'].max()], 'r--', lw=2)\n",
        "    axes[1, 1].set_xlabel('實際CO2 (ppm)')\n",
        "    axes[1, 1].set_ylabel('預測CO2 (ppm)')\n",
        "    axes[1, 1].set_title('測試集：預測 vs 實際')\n",
        "    axes[1, 1].grid(True, alpha=0.3)\n",
        "\n",
        "    # 6. 時間序列比較（測試集）\n",
        "    n_show = min(200, len(test_results['y_true']))\n",
        "    x_range = range(n_show)\n",
        "    axes[1, 2].plot(x_range, test_results['y_true'][:n_show],\n",
        "                   label='實際', linewidth=2, alpha=0.8)\n",
        "    axes[1, 2].plot(x_range, test_results['y_pred'][:n_show],\n",
        "                   label='預測', linewidth=2, alpha=0.8)\n",
        "    axes[1, 2].axhline(y=1000, color='red', linestyle='--', alpha=0.7, label='警戒線')\n",
        "    axes[1, 2].set_xlabel('時間序列')\n",
        "    axes[1, 2].set_ylabel('CO2 (ppm)')\n",
        "    axes[1, 2].set_title('測試集時間序列比較')\n",
        "    axes[1, 2].legend()\n",
        "    axes[1, 2].grid(True, alpha=0.3)\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "# 修改調用：\n",
        "visualize_results(history, results)"
      ],
      "metadata": {
        "id": "QkgnO5zwgHS7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def predict_future_co2(model, recent_data, scaler, sequence_length):\n",
        "    \"\"\"預測未來CO2濃度\"\"\"\n",
        "    # 標準化最近的數據\n",
        "    recent_scaled = scaler.transform(recent_data[-sequence_length:])\n",
        "\n",
        "    # 重塑為LSTM輸入格式\n",
        "    X_pred = recent_scaled.reshape(1, sequence_length, -1)\n",
        "\n",
        "    # 預測\n",
        "    pred_scaled = model.predict(X_pred, verbose=0)\n",
        "\n",
        "    # 反標準化\n",
        "    dummy_data = np.zeros((1, recent_data.shape[1]))\n",
        "    dummy_data[0, -1] = pred_scaled[0, 0]\n",
        "    pred_original = scaler.inverse_transform(dummy_data)[0, -1]\n",
        "\n",
        "    return pred_original\n",
        "\n",
        "# 測試預測函數\n",
        "print(\"\\\\n=== 測試即時預測 ===\")\n",
        "recent_data = df[final_features].iloc[-sequence_length:].values\n",
        "future_co2 = predict_future_co2(model, recent_data, scaler, sequence_length)\n",
        "current_co2 = df[co2_column].iloc[-1]\n",
        "\n",
        "print(f\"當前CO2濃度: {current_co2:.1f} ppm\")\n",
        "print(f\"預測15分鐘後CO2濃度: {future_co2:.1f} ppm\")\n",
        "print(f\"變化趨勢: {'+' if future_co2 > current_co2 else '-'}{abs(future_co2 - current_co2):.1f} ppm\")\n",
        "\n",
        "# 根據預測結果給出控制建議\n",
        "if future_co2 > 1000:\n",
        "    print(\"🔴 建議: 需要增加通風 (預測CO2將超標)\")\n",
        "elif future_co2 > 800:\n",
        "    print(\"🟡 建議: 適度通風 (預測CO2偏高)\")\n",
        "else:\n",
        "    print(\"🟢 建議: 維持現狀 (預測CO2正常)\")"
      ],
      "metadata": {
        "id": "EGXjC3PagJn8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\\\n保存模型...\")\n",
        "model.save('lstm_co2_prediction_model.h5')\n",
        "\n",
        "# 保存標準化器\n",
        "import pickle\n",
        "with open('scaler.pkl', 'wb') as f:\n",
        "    pickle.dump(scaler, f)\n",
        "\n",
        "# 保存特徵名稱\n",
        "with open('features.pkl', 'wb') as f:\n",
        "    pickle.dump(final_features, f)\n",
        "\n",
        "print(\"模型已保存！\")\n",
        "print(\"檔案: lstm_co2_prediction_model.h5, scaler.pkl, features.pkl\")\n",
        "\n",
        "# 下載模型檔案\n",
        "files.download('lstm_co2_prediction_model.h5')\n",
        "files.download('scaler.pkl')\n",
        "files.download('features.pkl')\n",
        "\n",
        "\n",
        "print(\"\\n=== LSTM CO2預測模型訓練完成! ===\")\n",
        "print(\"各數據集性能:\")\n",
        "for dataset, metrics in results.items():\n",
        "    print(f\"\\n{dataset}集:\")\n",
        "    for metric, value in metrics.items():\n",
        "        if metric in ['y_true', 'y_pred']:\n",
        "            continue\n",
        "        unit = \"ppm\" if metric in [\"mae\", \"rmse\"] else (\"%\" if metric == \"mape\" else \"\")\n",
        "        print(f\"  {metric.upper()}: {value:.3f} {unit}\")"
      ],
      "metadata": {
        "id": "1lNkCOXHgMdN"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}